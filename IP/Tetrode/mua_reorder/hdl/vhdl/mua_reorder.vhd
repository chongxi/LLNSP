-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.1
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mua_reorder is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    muar_stream_V_data_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    muar_stream_V_data_V_empty_n : IN STD_LOGIC;
    muar_stream_V_data_V_read : OUT STD_LOGIC;
    muao_stream_V_data_V_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    muao_stream_V_data_V_TVALID : OUT STD_LOGIC;
    muao_stream_V_data_V_TREADY : IN STD_LOGIC );
end;


architecture behav of mua_reorder is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mua_reorder,hls_ip_2016_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k325tffg900-2,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.386560,HLS_SYN_LAT=120,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=0,HLS_SYN_FF=444,HLS_SYN_LUT=577}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_pp0_stg0_fsm_5 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_st8_fsm_6 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv8_A0 : STD_LOGIC_VECTOR (7 downto 0) := "10100000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ch_cnt : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ch_cycle : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ch_No : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal buf_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_V_ce0 : STD_LOGIC;
    signal buf_V_we0 : STD_LOGIC;
    signal buf_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_r : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal muar_stream_V_data_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_47 : BOOLEAN;
    signal muao_stream_V_data_V_TDATA_blk_n : STD_LOGIC;
    signal ap_sig_cseq_ST_pp0_stg0_fsm_5 : STD_LOGIC;
    signal ap_sig_55 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal exitcond_reg_341 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_reg_113 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_73 : BOOLEAN;
    signal grp_fu_152_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_reg_288 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_82 : BOOLEAN;
    signal grp_fu_152_ap_done : STD_LOGIC;
    signal tmp_3_fu_161_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_293 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_95 : BOOLEAN;
    signal tmp_5_fu_171_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_299 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_177_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_304 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_reg_325 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_output_load_fu_242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_119 : BOOLEAN;
    signal exitcond_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_ioackin_muao_stream_V_data_V_TREADY : STD_LOGIC;
    signal k_1_fu_265_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal output_flag_1_phi_fu_128_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_flag_1_reg_124 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_new_1_reg_135 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_192_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_271_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_tmp_8_fu_225_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_ch_cycle_new_fu_235_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_ch_cycle_flag_fu_231_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_ch_No_new_fu_202_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_6 : STD_LOGIC;
    signal ap_sig_171 : BOOLEAN;
    signal ap_reg_ioackin_muao_stream_V_data_V_TREADY : STD_LOGIC := '0';
    signal grp_fu_152_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_158_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ch_No_new_fu_186_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_216_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_152_ap_start : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_65 : BOOLEAN;

    component mua_reorder_srem_32ns_4ns_4_36_seq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component mua_reorder_buf_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    buf_V_U : component mua_reorder_buf_V
    generic map (
        DataWidth => 32,
        AddressRange => 160,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buf_V_address0,
        ce0 => buf_V_ce0,
        we0 => buf_V_we0,
        d0 => muar_stream_V_data_V_dout,
        q0 => buf_V_q0);

    mua_reorder_srem_32ns_4ns_4_36_seq_U1 : component mua_reorder_srem_32ns_4ns_4_36_seq
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 4,
        dout_WIDTH => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_152_ap_start,
        done => grp_fu_152_ap_done,
        din0 => ch_cnt,
        din1 => grp_fu_152_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_152_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_muao_stream_V_data_V_TREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_muao_stream_V_data_V_TREADY <= ap_const_logic_0;
            else
                if (ap_sig_65) then
                    if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_lv1_0 = exitcond_reg_341) and (ap_const_logic_0 = ap_sig_ioackin_muao_stream_V_data_V_TREADY)))) then 
                        ap_reg_ioackin_muao_stream_V_data_V_TREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = muao_stream_V_data_V_TREADY)) then 
                        ap_reg_ioackin_muao_stream_V_data_V_TREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_lv1_0 = exitcond_reg_341) and (ap_const_logic_0 = ap_sig_ioackin_muao_stream_V_data_V_TREADY))) and not((ap_const_lv1_0 = exitcond_fu_259_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = p_output_load_fu_242_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_lv1_0 = exitcond_reg_341) and (ap_const_logic_0 = ap_sig_ioackin_muao_stream_V_data_V_TREADY))) and (ap_const_lv1_0 = exitcond_fu_259_p2))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = p_output_load_fu_242_p2))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_lv1_0 = exitcond_reg_341) and (ap_const_logic_0 = ap_sig_ioackin_muao_stream_V_data_V_TREADY))) and not((ap_const_lv1_0 = exitcond_fu_259_p2))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ch_No_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ch_No <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((muar_stream_V_data_V_empty_n = ap_const_logic_0)))) then 
                    ch_No <= p_ch_No_new_fu_202_p3;
                end if; 
            end if;
        end if;
    end process;


    ch_cnt_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ch_cnt <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
                    ch_cnt <= p_tmp_8_fu_225_p3;
                end if; 
            end if;
        end if;
    end process;


    ch_cycle_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ch_cycle <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = p_ch_cycle_flag_fu_231_p2)))) then 
                    ch_cycle <= p_ch_cycle_new_fu_235_p3;
                end if; 
            end if;
        end if;
    end process;


    output_r_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_r <= ap_const_lv1_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_6) and not((ap_const_lv1_0 = output_flag_1_phi_fu_128_p4)))) then 
                    output_r <= output_new_1_reg_135;
                end if; 
            end if;
        end if;
    end process;


    k_reg_113_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = p_output_load_fu_242_p2)))) then 
                k_reg_113 <= ap_const_lv8_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_lv1_0 = exitcond_reg_341) and (ap_const_logic_0 = ap_sig_ioackin_muao_stream_V_data_V_TREADY))) and (ap_const_lv1_0 = exitcond_fu_259_p2))) then 
                k_reg_113 <= k_1_fu_265_p2;
            end if; 
        end if;
    end process;

    output_flag_1_reg_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_lv1_0 = exitcond_reg_341) and (ap_const_logic_0 = ap_sig_ioackin_muao_stream_V_data_V_TREADY))) and not((ap_const_lv1_0 = exitcond_fu_259_p2)))) then 
                output_flag_1_reg_124 <= ap_const_lv1_1;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = p_output_load_fu_242_p2))) then 
                output_flag_1_reg_124 <= tmp_9_reg_325;
            end if; 
        end if;
    end process;

    output_new_1_reg_135_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_lv1_0 = exitcond_reg_341) and (ap_const_logic_0 = ap_sig_ioackin_muao_stream_V_data_V_TREADY))) and not((ap_const_lv1_0 = exitcond_fu_259_p2)))) then 
                output_new_1_reg_135 <= ap_const_lv1_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = p_output_load_fu_242_p2))) then 
                output_new_1_reg_135 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_lv1_0 = exitcond_reg_341) and (ap_const_logic_0 = ap_sig_ioackin_muao_stream_V_data_V_TREADY))))) then
                exitcond_reg_341 <= exitcond_fu_259_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_logic_0 = grp_fu_152_ap_done)))) then
                tmp_2_reg_288 <= grp_fu_152_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                tmp_3_reg_293 <= tmp_3_fu_161_p2;
                tmp_5_reg_299 <= tmp_5_fu_171_p2;
                tmp_8_reg_304 <= tmp_8_fu_177_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((muar_stream_V_data_V_empty_n = ap_const_logic_0)))) then
                tmp_9_reg_325 <= tmp_9_fu_197_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (muar_stream_V_data_V_empty_n, ap_CS_fsm, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it0, exitcond_reg_341, grp_fu_152_ap_done, p_output_load_fu_242_p2, exitcond_fu_259_p2, ap_sig_ioackin_muao_stream_V_data_V_TREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when ap_ST_st2_fsm_1 => 
                if (not((ap_const_logic_0 = grp_fu_152_ap_done))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                if (not((muar_stream_V_data_V_empty_n = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st5_fsm_4 => 
                if ((ap_const_lv1_0 = p_output_load_fu_242_p2)) then
                    ap_NS_fsm <= ap_ST_st8_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_5;
                end if;
            when ap_ST_pp0_stg0_fsm_5 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_lv1_0 = exitcond_reg_341) and (ap_const_logic_0 = ap_sig_ioackin_muao_stream_V_data_V_TREADY))) and not((ap_const_lv1_0 = exitcond_fu_259_p2))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_5;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_lv1_0 = exitcond_reg_341) and (ap_const_logic_0 = ap_sig_ioackin_muao_stream_V_data_V_TREADY))) and not((ap_const_lv1_0 = exitcond_fu_259_p2)))) then
                    ap_NS_fsm <= ap_ST_st8_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_5;
                end if;
            when ap_ST_st8_fsm_6 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_119_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_119 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_171_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_171 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    ap_sig_47_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_47 <= (ap_CS_fsm(3 downto 3) = ap_const_lv1_1);
    end process;


    ap_sig_55_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_55 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    ap_sig_65_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_5, ap_reg_ppiten_pp0_it1, exitcond_reg_341)
    begin
                ap_sig_65 <= ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_lv1_0 = exitcond_reg_341));
    end process;


    ap_sig_73_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_73 <= (ap_const_lv1_1 = ap_CS_fsm(0 downto 0));
    end process;


    ap_sig_82_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_82 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_95_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_95 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_cseq_ST_pp0_stg0_fsm_5_assign_proc : process(ap_sig_55)
    begin
        if (ap_sig_55) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_73)
    begin
        if (ap_sig_73) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_82)
    begin
        if (ap_sig_82) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_95)
    begin
        if (ap_sig_95) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_47)
    begin
        if (ap_sig_47) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_119)
    begin
        if (ap_sig_119) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st8_fsm_6_assign_proc : process(ap_sig_171)
    begin
        if (ap_sig_171) then 
            ap_sig_cseq_ST_st8_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_muao_stream_V_data_V_TREADY_assign_proc : process(muao_stream_V_data_V_TREADY, ap_reg_ioackin_muao_stream_V_data_V_TREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_muao_stream_V_data_V_TREADY)) then 
            ap_sig_ioackin_muao_stream_V_data_V_TREADY <= muao_stream_V_data_V_TREADY;
        else 
            ap_sig_ioackin_muao_stream_V_data_V_TREADY <= ap_const_logic_1;
        end if; 
    end process;


    buf_V_address0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_pp0_stg0_fsm_5, ap_reg_ppiten_pp0_it0, tmp_7_fu_192_p1, tmp_s_fu_271_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            buf_V_address0 <= tmp_7_fu_192_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            buf_V_address0 <= tmp_s_fu_271_p1(8 - 1 downto 0);
        else 
            buf_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    buf_V_ce0_assign_proc : process(muar_stream_V_data_V_empty_n, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_pp0_stg0_fsm_5, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it0, exitcond_reg_341, ap_sig_cseq_ST_st5_fsm_4, ap_sig_ioackin_muao_stream_V_data_V_TREADY)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((muar_stream_V_data_V_empty_n = ap_const_logic_0))) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_lv1_0 = exitcond_reg_341) and (ap_const_logic_0 = ap_sig_ioackin_muao_stream_V_data_V_TREADY)))))) then 
            buf_V_ce0 <= ap_const_logic_1;
        else 
            buf_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_V_we0_assign_proc : process(muar_stream_V_data_V_empty_n, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((muar_stream_V_data_V_empty_n = ap_const_logic_0))))) then 
            buf_V_we0 <= ap_const_logic_1;
        else 
            buf_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ch_No_new_fu_186_p3 <= 
        ch_cycle when (tmp_3_reg_293(0) = '1') else 
        tmp_5_reg_299;
    exitcond_fu_259_p2 <= "1" when (k_reg_113 = ap_const_lv8_A0) else "0";

    grp_fu_152_ap_start_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then 
            grp_fu_152_ap_start <= ap_const_logic_1;
        else 
            grp_fu_152_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_152_p1 <= ap_const_lv32_5(4 - 1 downto 0);
    k_1_fu_265_p2 <= std_logic_vector(unsigned(k_reg_113) + unsigned(ap_const_lv8_1));
    muao_stream_V_data_V_TDATA <= buf_V_q0;

    muao_stream_V_data_V_TDATA_blk_n_assign_proc : process(muao_stream_V_data_V_TREADY, ap_sig_cseq_ST_pp0_stg0_fsm_5, ap_reg_ppiten_pp0_it1, exitcond_reg_341)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_lv1_0 = exitcond_reg_341))) then 
            muao_stream_V_data_V_TDATA_blk_n <= muao_stream_V_data_V_TREADY;
        else 
            muao_stream_V_data_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    muao_stream_V_data_V_TVALID_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_5, ap_reg_ppiten_pp0_it1, exitcond_reg_341, ap_reg_ioackin_muao_stream_V_data_V_TREADY)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_lv1_0 = exitcond_reg_341) and (ap_const_logic_0 = ap_reg_ioackin_muao_stream_V_data_V_TREADY))) then 
            muao_stream_V_data_V_TVALID <= ap_const_logic_1;
        else 
            muao_stream_V_data_V_TVALID <= ap_const_logic_0;
        end if; 
    end process;


    muar_stream_V_data_V_blk_n_assign_proc : process(muar_stream_V_data_V_empty_n, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            muar_stream_V_data_V_blk_n <= muar_stream_V_data_V_empty_n;
        else 
            muar_stream_V_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    muar_stream_V_data_V_read_assign_proc : process(muar_stream_V_data_V_empty_n, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((muar_stream_V_data_V_empty_n = ap_const_logic_0)))) then 
            muar_stream_V_data_V_read <= ap_const_logic_1;
        else 
            muar_stream_V_data_V_read <= ap_const_logic_0;
        end if; 
    end process;

    output_flag_1_phi_fu_128_p4 <= output_flag_1_reg_124;
    p_ch_No_new_fu_202_p3 <= 
        ap_const_lv32_0 when (tmp_9_fu_197_p2(0) = '1') else 
        ch_No_new_fu_186_p3;
    p_ch_cycle_flag_fu_231_p2 <= (tmp_9_reg_325 or tmp_3_reg_293);
    p_ch_cycle_new_fu_235_p3 <= 
        ap_const_lv32_0 when (tmp_9_reg_325(0) = '1') else 
        tmp_4_fu_216_p2;
    p_output_load_fu_242_p2 <= (output_r or tmp_9_reg_325);
    p_tmp_8_fu_225_p3 <= 
        ap_const_lv32_0 when (tmp_9_reg_325(0) = '1') else 
        tmp_8_reg_304;
    tmp_1_fu_158_p1 <= tmp_2_reg_288(4 - 1 downto 0);
    tmp_3_fu_161_p2 <= "1" when (tmp_1_fu_158_p1 = ap_const_lv4_0) else "0";
    tmp_4_fu_216_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(ch_cycle));
    tmp_5_fu_171_p2 <= std_logic_vector(unsigned(ap_const_lv32_20) + unsigned(ch_No));
        tmp_7_fu_192_p1 <= std_logic_vector(resize(signed(ch_No_new_fu_186_p3),64));

    tmp_8_fu_177_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(ch_cnt));
    tmp_9_fu_197_p2 <= "1" when (tmp_8_reg_304 = ap_const_lv32_A0) else "0";
    tmp_s_fu_271_p1 <= std_logic_vector(resize(unsigned(k_reg_113),64));
end behav;
