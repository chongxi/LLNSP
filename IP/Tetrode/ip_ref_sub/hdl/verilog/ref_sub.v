// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.1
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="ref_sub,hls_ip_2016_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k325tffg900-2,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.350000,HLS_SYN_LAT=5,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=522,HLS_SYN_LUT=171}" *)

module ref_sub (
        ap_clk,
        ap_rst_n,
        mua_stream_V_data_V_dout,
        mua_stream_V_data_V_empty_n,
        mua_stream_V_data_V_read,
        muar_stream_V_data_V_TDATA,
        muar_stream_V_data_V_TVALID,
        muar_stream_V_data_V_TREADY
);

parameter    ap_ST_st1_fsm_0 = 6'b1;
parameter    ap_ST_st2_fsm_1 = 6'b10;
parameter    ap_ST_st3_fsm_2 = 6'b100;
parameter    ap_ST_st4_fsm_3 = 6'b1000;
parameter    ap_ST_st5_fsm_4 = 6'b10000;
parameter    ap_ST_st6_fsm_5 = 6'b100000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_80 = 32'b10000000;
parameter    ap_const_lv32_9F = 32'b10011111;
parameter    ap_const_lv32_6C = 32'b1101100;
parameter    ap_const_lv32_77 = 32'b1110111;
parameter    ap_const_lv32_60 = 32'b1100000;
parameter    ap_const_lv32_6B = 32'b1101011;
parameter    ap_const_lv32_69 = 32'b1101001;
parameter    ap_const_lv32_75 = 32'b1110101;
parameter    ap_const_lv10_A0 = 10'b10100000;
parameter    ap_const_lv10_0 = 10'b0000000000;
parameter    ap_const_lv12_A0 = 12'b10100000;
parameter    ap_const_lv32_FFFFFFFF = 32'b11111111111111111111111111111111;
parameter    ap_const_lv160_lc_1 = 160'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv32_20 = 32'b100000;
parameter    ap_const_lv32_3F = 32'b111111;
parameter    ap_const_lv32_40 = 32'b1000000;
parameter    ap_const_lv32_5F = 32'b1011111;

input   ap_clk;
input   ap_rst_n;
input  [159:0] mua_stream_V_data_V_dout;
input   mua_stream_V_data_V_empty_n;
output   mua_stream_V_data_V_read;
output  [159:0] muar_stream_V_data_V_TDATA;
output   muar_stream_V_data_V_TVALID;
input   muar_stream_V_data_V_TREADY;

reg mua_stream_V_data_V_read;

reg    ap_rst_n_inv;
reg    muar_stream_V_data_V_1_vld_in;
reg    muar_stream_V_data_V_1_ack_in;
wire    muar_stream_V_data_V_1_ack_out;
reg   [159:0] muar_stream_V_data_V_1_data_reg;
reg    muar_stream_V_data_V_1_sRdy;
reg    muar_stream_V_data_V_1_mVld;
reg    muar_stream_V_data_V_1_areset_d;
reg   [8:0] buf_2d_V_address0;
reg    buf_2d_V_ce0;
reg    buf_2d_V_we0;
wire   [31:0] buf_2d_V_q0;
wire   [8:0] buf_2d_V_address1;
reg    buf_2d_V_ce1;
wire   [31:0] buf_2d_V_q1;
reg    mua_stream_V_data_V_blk_n;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_63;
reg    muar_stream_V_data_V_TDATA_blk_n;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_71;
wire   [0:0] tmp_s_fu_261_p2;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_82;
reg   [0:0] tmp_s_reg_431;
reg   [159:0] tmp_data_V_1_reg_355;
reg   [31:0] loc_V_reg_361;
reg   [11:0] loc_V_1_reg_367;
reg   [11:0] loc_V_2_reg_373;
wire   [31:0] loc_V_3_fu_166_p1;
reg   [31:0] loc_V_3_reg_378;
reg   [0:0] j_reg_383;
reg   [9:0] tmp_cast_reg_389;
reg   [9:0] tmp_4_cast_reg_395;
wire   [9:0] tmp_6_fu_222_p2;
reg   [9:0] tmp_6_reg_400;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_114;
wire   [9:0] tmp_7_fu_227_p2;
reg   [9:0] tmp_7_reg_405;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_125;
reg   [31:0] p_Val2_s_reg_420;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_135;
reg   [31:0] p_Val2_3_reg_426;
wire   [159:0] p_Result_17_fu_342_p5;
wire  signed [63:0] tmp_3_cast_fu_210_p1;
wire  signed [63:0] tmp_6_cast_fu_232_p1;
wire  signed [63:0] tmp_7_cast_fu_236_p1;
wire   [9:0] tmp_1_cast_fu_198_p3;
wire   [9:0] tmp_3_fu_205_p2;
wire   [9:0] tmp_5_cast_fu_215_p3;
wire   [0:0] tmp_2_fu_240_p2;
wire   [31:0] p_val_V_fu_245_p2;
wire   [31:0] p_val_V_3_fu_249_p3;
wire   [159:0] p_Result_s_fu_266_p5;
wire   [31:0] p_Result_11_fu_278_p4;
wire   [159:0] p_Result_12_fu_287_p5;
wire   [31:0] p_Result_13_fu_299_p4;
wire   [159:0] p_Result_14_fu_308_p5;
wire   [159:0] p_Result_15_fu_320_p5;
wire   [159:0] p_Result_16_fu_331_p5;
wire   [31:0] t_out_V_fu_256_p2;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 muar_stream_V_data_V_1_mVld = 1'b0;
#0 ap_CS_fsm = 6'b1;
end

ref_sub_buf_2d_V #(
    .DataWidth( 32 ),
    .AddressRange( 320 ),
    .AddressWidth( 9 ))
buf_2d_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(buf_2d_V_address0),
    .ce0(buf_2d_V_ce0),
    .we0(buf_2d_V_we0),
    .d0(loc_V_3_reg_378),
    .q0(buf_2d_V_q0),
    .address1(buf_2d_V_address1),
    .ce1(buf_2d_V_ce1),
    .q1(buf_2d_V_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        muar_stream_V_data_V_1_mVld <= 1'b0;
    end else begin
        if ((1'b1 == muar_stream_V_data_V_1_vld_in)) begin
            muar_stream_V_data_V_1_mVld <= 1'b1;
        end else if ((1'b1 == muar_stream_V_data_V_1_ack_out)) begin
            muar_stream_V_data_V_1_mVld <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(mua_stream_V_data_V_empty_n == 1'b0))) begin
        j_reg_383 <= mua_stream_V_data_V_dout[ap_const_lv32_80];
        loc_V_1_reg_367 <= {{mua_stream_V_data_V_dout[ap_const_lv32_77 : ap_const_lv32_6C]}};
        loc_V_2_reg_373 <= {{mua_stream_V_data_V_dout[ap_const_lv32_6B : ap_const_lv32_60]}};
        loc_V_3_reg_378 <= loc_V_3_fu_166_p1;
        loc_V_reg_361 <= {{mua_stream_V_data_V_dout[ap_const_lv32_9F : ap_const_lv32_80]}};
        tmp_4_cast_reg_395 <= {{mua_stream_V_data_V_dout[ap_const_lv32_75 : ap_const_lv32_6C]}};
        tmp_cast_reg_389 <= {{mua_stream_V_data_V_dout[ap_const_lv32_69 : ap_const_lv32_60]}};
        tmp_data_V_1_reg_355 <= mua_stream_V_data_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == 1'b1)) begin
        muar_stream_V_data_V_1_areset_d <= ap_rst_n_inv;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == muar_stream_V_data_V_1_vld_in) & (1'b1 == muar_stream_V_data_V_1_sRdy))) begin
        muar_stream_V_data_V_1_data_reg <= p_Result_17_fu_342_p5;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        p_Val2_3_reg_426 <= buf_2d_V_q1;
        p_Val2_s_reg_420 <= buf_2d_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        tmp_6_reg_400 <= tmp_6_fu_222_p2;
        tmp_7_reg_405 <= tmp_7_fu_227_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st5_fsm_4) & ~((tmp_s_fu_261_p2 == 1'b0) & (1'b0 == muar_stream_V_data_V_1_ack_in)))) begin
        tmp_s_reg_431 <= tmp_s_fu_261_p2;
    end
end

always @ (*) begin
    if (ap_sig_63) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_114) begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_125) begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_135) begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_71) begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_82) begin
        ap_sig_cseq_ST_st6_fsm_5 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        buf_2d_V_address0 = tmp_3_cast_fu_210_p1;
    end else if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        buf_2d_V_address0 = tmp_6_cast_fu_232_p1;
    end else begin
        buf_2d_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) | (1'b1 == ap_sig_cseq_ST_st3_fsm_2))) begin
        buf_2d_V_ce0 = 1'b1;
    end else begin
        buf_2d_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        buf_2d_V_ce1 = 1'b1;
    end else begin
        buf_2d_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        buf_2d_V_we0 = 1'b1;
    end else begin
        buf_2d_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st1_fsm_0)) begin
        mua_stream_V_data_V_blk_n = mua_stream_V_data_V_empty_n;
    end else begin
        mua_stream_V_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(mua_stream_V_data_V_empty_n == 1'b0))) begin
        mua_stream_V_data_V_read = 1'b1;
    end else begin
        mua_stream_V_data_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st5_fsm_4) & (tmp_s_fu_261_p2 == 1'b0) & ~((tmp_s_fu_261_p2 == 1'b0) & (1'b0 == muar_stream_V_data_V_1_ack_in)))) begin
        muar_stream_V_data_V_1_vld_in = 1'b1;
    end else begin
        muar_stream_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_sig_cseq_ST_st5_fsm_4) & (tmp_s_fu_261_p2 == 1'b0)) | ((1'b1 == ap_sig_cseq_ST_st6_fsm_5) & (1'b0 == tmp_s_reg_431)))) begin
        muar_stream_V_data_V_TDATA_blk_n = muar_stream_V_data_V_1_sRdy;
    end else begin
        muar_stream_V_data_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~(mua_stream_V_data_V_empty_n == 1'b0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        ap_ST_st3_fsm_2 : begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st4_fsm_3 : begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : begin
            if (~((tmp_s_fu_261_p2 == 1'b0) & (1'b0 == muar_stream_V_data_V_1_ack_in))) begin
                ap_NS_fsm = ap_ST_st6_fsm_5;
            end else begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end
        end
        ap_ST_st6_fsm_5 : begin
            if (~((muar_stream_V_data_V_1_ack_in == 1'b0) | ((1'b0 == tmp_s_reg_431) & (1'b0 == muar_stream_V_data_V_1_ack_in)))) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st6_fsm_5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

always @ (*) begin
    ap_sig_114 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

always @ (*) begin
    ap_sig_125 = (1'b1 == ap_CS_fsm[ap_const_lv32_2]);
end

always @ (*) begin
    ap_sig_135 = (1'b1 == ap_CS_fsm[ap_const_lv32_3]);
end

always @ (*) begin
    ap_sig_63 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_71 = (1'b1 == ap_CS_fsm[ap_const_lv32_4]);
end

always @ (*) begin
    ap_sig_82 = (1'b1 == ap_CS_fsm[ap_const_lv32_5]);
end

assign buf_2d_V_address1 = tmp_7_cast_fu_236_p1;

assign loc_V_3_fu_166_p1 = mua_stream_V_data_V_dout[31:0];

always @ (*) begin
    muar_stream_V_data_V_1_ack_in = (~muar_stream_V_data_V_1_areset_d & (muar_stream_V_data_V_TREADY | ~muar_stream_V_data_V_1_mVld));
end

assign muar_stream_V_data_V_1_ack_out = muar_stream_V_data_V_TREADY;

always @ (*) begin
    muar_stream_V_data_V_1_sRdy = (~muar_stream_V_data_V_1_areset_d & (muar_stream_V_data_V_TREADY | ~muar_stream_V_data_V_1_mVld));
end

assign muar_stream_V_data_V_TDATA = muar_stream_V_data_V_1_data_reg;

assign muar_stream_V_data_V_TVALID = muar_stream_V_data_V_1_mVld;

assign p_Result_11_fu_278_p4 = {{tmp_data_V_1_reg_355[ap_const_lv32_3F : ap_const_lv32_20]}};

assign p_Result_12_fu_287_p5 = {{p_Result_s_fu_266_p5[32'd159 : 32'd64]}, {p_Result_11_fu_278_p4}, {p_Result_s_fu_266_p5[32'd31 : 32'd0]}};

assign p_Result_13_fu_299_p4 = {{tmp_data_V_1_reg_355[ap_const_lv32_5F : ap_const_lv32_40]}};

assign p_Result_14_fu_308_p5 = {{p_Result_12_fu_287_p5[32'd159 : 32'd96]}, {p_Result_13_fu_299_p4}, {p_Result_12_fu_287_p5[32'd63 : 32'd0]}};

assign p_Result_15_fu_320_p5 = {{p_Result_14_fu_308_p5[32'd159 : 32'd108]}, {loc_V_2_reg_373}, {p_Result_14_fu_308_p5[32'd95 : 32'd0]}};

assign p_Result_16_fu_331_p5 = {{p_Result_15_fu_320_p5[32'd159 : 32'd120]}, {loc_V_1_reg_367}, {p_Result_15_fu_320_p5[32'd107 : 32'd0]}};

assign p_Result_17_fu_342_p5 = {{t_out_V_fu_256_p2}, {p_Result_16_fu_331_p5[32'd127 : 32'd0]}};

assign p_Result_s_fu_266_p5 = {{ap_const_lv160_lc_1[32'd159 : 32'd32]}, {p_val_V_3_fu_249_p3}};

assign p_val_V_3_fu_249_p3 = ((tmp_2_fu_240_p2[0:0] === 1'b1) ? p_val_V_fu_245_p2 : p_Val2_s_reg_420);

assign p_val_V_fu_245_p2 = (p_Val2_s_reg_420 - p_Val2_3_reg_426);

assign t_out_V_fu_256_p2 = ($signed(ap_const_lv32_FFFFFFFF) + $signed(loc_V_reg_361));

assign tmp_1_cast_fu_198_p3 = ((j_reg_383[0:0] === 1'b1) ? ap_const_lv10_A0 : ap_const_lv10_0);

assign tmp_2_fu_240_p2 = ((loc_V_1_reg_367 < ap_const_lv12_A0) ? 1'b1 : 1'b0);

assign tmp_3_cast_fu_210_p1 = $signed(tmp_3_fu_205_p2);

assign tmp_3_fu_205_p2 = (tmp_cast_reg_389 + tmp_1_cast_fu_198_p3);

assign tmp_5_cast_fu_215_p3 = ((j_reg_383[0:0] === 1'b1) ? ap_const_lv10_0 : ap_const_lv10_A0);

assign tmp_6_cast_fu_232_p1 = $signed(tmp_6_reg_400);

assign tmp_6_fu_222_p2 = (tmp_cast_reg_389 + tmp_5_cast_fu_215_p3);

assign tmp_7_cast_fu_236_p1 = $signed(tmp_7_reg_405);

assign tmp_7_fu_227_p2 = (tmp_4_cast_reg_395 + tmp_5_cast_fu_215_p3);

assign tmp_s_fu_261_p2 = ((loc_V_reg_361 == ap_const_lv32_0) ? 1'b1 : 1'b0);

endmodule //ref_sub
