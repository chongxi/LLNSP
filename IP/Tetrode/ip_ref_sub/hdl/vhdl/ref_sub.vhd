-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.1
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ref_sub is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    mua_stream_V_data_V_dout : IN STD_LOGIC_VECTOR (159 downto 0);
    mua_stream_V_data_V_empty_n : IN STD_LOGIC;
    mua_stream_V_data_V_read : OUT STD_LOGIC;
    muar_stream_V_data_V_TDATA : OUT STD_LOGIC_VECTOR (159 downto 0);
    muar_stream_V_data_V_TVALID : OUT STD_LOGIC;
    muar_stream_V_data_V_TREADY : IN STD_LOGIC );
end;


architecture behav of ref_sub is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "ref_sub,hls_ip_2016_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k325tffg900-2,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.350000,HLS_SYN_LAT=5,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=522,HLS_SYN_LUT=171}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_true : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_6C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101100";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv32_69 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101001";
    constant ap_const_lv32_75 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110101";
    constant ap_const_lv10_A0 : STD_LOGIC_VECTOR (9 downto 0) := "0010100000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv12_A0 : STD_LOGIC_VECTOR (11 downto 0) := "000010100000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv160_lc_1 : STD_LOGIC_VECTOR (159 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal muar_stream_V_data_V_1_vld_in : STD_LOGIC;
    signal muar_stream_V_data_V_1_ack_in : STD_LOGIC;
    signal muar_stream_V_data_V_1_ack_out : STD_LOGIC;
    signal muar_stream_V_data_V_1_data_reg : STD_LOGIC_VECTOR (159 downto 0);
    signal muar_stream_V_data_V_1_sRdy : STD_LOGIC;
    signal muar_stream_V_data_V_1_mVld : STD_LOGIC := '0';
    signal muar_stream_V_data_V_1_areset_d : STD_LOGIC;
    signal buf_2d_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal buf_2d_V_ce0 : STD_LOGIC;
    signal buf_2d_V_we0 : STD_LOGIC;
    signal buf_2d_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal buf_2d_V_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal buf_2d_V_ce1 : STD_LOGIC;
    signal buf_2d_V_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mua_stream_V_data_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_63 : BOOLEAN;
    signal muar_stream_V_data_V_TDATA_blk_n : STD_LOGIC;
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_71 : BOOLEAN;
    signal tmp_s_fu_261_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_82 : BOOLEAN;
    signal tmp_s_reg_431 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_data_V_1_reg_355 : STD_LOGIC_VECTOR (159 downto 0);
    signal loc_V_reg_361 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_V_1_reg_367 : STD_LOGIC_VECTOR (11 downto 0);
    signal loc_V_2_reg_373 : STD_LOGIC_VECTOR (11 downto 0);
    signal loc_V_3_fu_166_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_V_3_reg_378 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_reg_383 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_cast_reg_389 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_cast_reg_395 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_6_fu_222_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_6_reg_400 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_114 : BOOLEAN;
    signal tmp_7_fu_227_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_7_reg_405 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_125 : BOOLEAN;
    signal p_Val2_s_reg_420 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_135 : BOOLEAN;
    signal p_Val2_3_reg_426 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_17_fu_342_p5 : STD_LOGIC_VECTOR (159 downto 0);
    signal tmp_3_cast_fu_210_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_cast_fu_232_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_cast_fu_236_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_cast_fu_198_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_3_fu_205_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_cast_fu_215_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_fu_240_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_val_V_fu_245_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_val_V_3_fu_249_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_266_p5 : STD_LOGIC_VECTOR (159 downto 0);
    signal p_Result_11_fu_278_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_12_fu_287_p5 : STD_LOGIC_VECTOR (159 downto 0);
    signal p_Result_13_fu_299_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_14_fu_308_p5 : STD_LOGIC_VECTOR (159 downto 0);
    signal p_Result_15_fu_320_p5 : STD_LOGIC_VECTOR (159 downto 0);
    signal p_Result_16_fu_331_p5 : STD_LOGIC_VECTOR (159 downto 0);
    signal t_out_V_fu_256_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component ref_sub_buf_2d_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    buf_2d_V_U : component ref_sub_buf_2d_V
    generic map (
        DataWidth => 32,
        AddressRange => 320,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buf_2d_V_address0,
        ce0 => buf_2d_V_ce0,
        we0 => buf_2d_V_we0,
        d0 => loc_V_3_reg_378,
        q0 => buf_2d_V_q0,
        address1 => buf_2d_V_address1,
        ce1 => buf_2d_V_ce1,
        q1 => buf_2d_V_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    muar_stream_V_data_V_1_mVld_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                muar_stream_V_data_V_1_mVld <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = muar_stream_V_data_V_1_vld_in)) then 
                    muar_stream_V_data_V_1_mVld <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = muar_stream_V_data_V_1_ack_out)) then 
                    muar_stream_V_data_V_1_mVld <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((mua_stream_V_data_V_empty_n = ap_const_logic_0)))) then
                j_reg_383 <= mua_stream_V_data_V_dout(128 downto 128);
                loc_V_1_reg_367 <= mua_stream_V_data_V_dout(119 downto 108);
                loc_V_2_reg_373 <= mua_stream_V_data_V_dout(107 downto 96);
                loc_V_3_reg_378 <= loc_V_3_fu_166_p1;
                loc_V_reg_361 <= mua_stream_V_data_V_dout(159 downto 128);
                tmp_4_cast_reg_395 <= mua_stream_V_data_V_dout(117 downto 108);
                tmp_cast_reg_389 <= mua_stream_V_data_V_dout(105 downto 96);
                tmp_data_V_1_reg_355 <= mua_stream_V_data_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_const_logic_1)) then
                muar_stream_V_data_V_1_areset_d <= ap_rst_n_inv;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = muar_stream_V_data_V_1_vld_in) and (ap_const_logic_1 = muar_stream_V_data_V_1_sRdy))) then
                muar_stream_V_data_V_1_data_reg <= p_Result_17_fu_342_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                p_Val2_3_reg_426 <= buf_2d_V_q1;
                p_Val2_s_reg_420 <= buf_2d_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                tmp_6_reg_400 <= tmp_6_fu_222_p2;
                tmp_7_reg_405 <= tmp_7_fu_227_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not(((tmp_s_fu_261_p2 = ap_const_lv1_0) and (ap_const_logic_0 = muar_stream_V_data_V_1_ack_in))))) then
                tmp_s_reg_431 <= tmp_s_fu_261_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (mua_stream_V_data_V_empty_n, muar_stream_V_data_V_1_ack_in, ap_CS_fsm, tmp_s_fu_261_p2, tmp_s_reg_431)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((mua_stream_V_data_V_empty_n = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                if (not(((tmp_s_fu_261_p2 = ap_const_lv1_0) and (ap_const_logic_0 = muar_stream_V_data_V_1_ack_in)))) then
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st6_fsm_5 => 
                if (not(((muar_stream_V_data_V_1_ack_in = ap_const_logic_0) or ((ap_const_lv1_0 = tmp_s_reg_431) and (ap_const_logic_0 = muar_stream_V_data_V_1_ack_in))))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_114_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_114 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_125_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_125 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_135_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_135 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_63_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_63 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_71_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_71 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_82_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_82 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_63)
    begin
        if (ap_sig_63) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_114)
    begin
        if (ap_sig_114) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_125)
    begin
        if (ap_sig_125) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_135)
    begin
        if (ap_sig_135) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_71)
    begin
        if (ap_sig_71) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_82)
    begin
        if (ap_sig_82) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    buf_2d_V_address0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st3_fsm_2, tmp_3_cast_fu_210_p1, tmp_6_cast_fu_232_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            buf_2d_V_address0 <= tmp_3_cast_fu_210_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            buf_2d_V_address0 <= tmp_6_cast_fu_232_p1(9 - 1 downto 0);
        else 
            buf_2d_V_address0 <= "XXXXXXXXX";
        end if; 
    end process;

    buf_2d_V_address1 <= tmp_7_cast_fu_236_p1(9 - 1 downto 0);

    buf_2d_V_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2))) then 
            buf_2d_V_ce0 <= ap_const_logic_1;
        else 
            buf_2d_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_2d_V_ce1_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            buf_2d_V_ce1 <= ap_const_logic_1;
        else 
            buf_2d_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buf_2d_V_we0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1))) then 
            buf_2d_V_we0 <= ap_const_logic_1;
        else 
            buf_2d_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    loc_V_3_fu_166_p1 <= mua_stream_V_data_V_dout(32 - 1 downto 0);

    mua_stream_V_data_V_blk_n_assign_proc : process(mua_stream_V_data_V_empty_n, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then 
            mua_stream_V_data_V_blk_n <= mua_stream_V_data_V_empty_n;
        else 
            mua_stream_V_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    mua_stream_V_data_V_read_assign_proc : process(mua_stream_V_data_V_empty_n, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((mua_stream_V_data_V_empty_n = ap_const_logic_0)))) then 
            mua_stream_V_data_V_read <= ap_const_logic_1;
        else 
            mua_stream_V_data_V_read <= ap_const_logic_0;
        end if; 
    end process;


    muar_stream_V_data_V_1_ack_in_assign_proc : process(muar_stream_V_data_V_TREADY, muar_stream_V_data_V_1_mVld, muar_stream_V_data_V_1_areset_d)
    begin
        muar_stream_V_data_V_1_ack_in <= (not(muar_stream_V_data_V_1_areset_d) and (muar_stream_V_data_V_TREADY or not(muar_stream_V_data_V_1_mVld)));
    end process;

    muar_stream_V_data_V_1_ack_out <= muar_stream_V_data_V_TREADY;

    muar_stream_V_data_V_1_sRdy_assign_proc : process(muar_stream_V_data_V_TREADY, muar_stream_V_data_V_1_mVld, muar_stream_V_data_V_1_areset_d)
    begin
        muar_stream_V_data_V_1_sRdy <= (not(muar_stream_V_data_V_1_areset_d) and (muar_stream_V_data_V_TREADY or not(muar_stream_V_data_V_1_mVld)));
    end process;


    muar_stream_V_data_V_1_vld_in_assign_proc : process(muar_stream_V_data_V_1_ack_in, ap_sig_cseq_ST_st5_fsm_4, tmp_s_fu_261_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (tmp_s_fu_261_p2 = ap_const_lv1_0) and not(((tmp_s_fu_261_p2 = ap_const_lv1_0) and (ap_const_logic_0 = muar_stream_V_data_V_1_ack_in))))) then 
            muar_stream_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            muar_stream_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    muar_stream_V_data_V_TDATA <= muar_stream_V_data_V_1_data_reg;

    muar_stream_V_data_V_TDATA_blk_n_assign_proc : process(muar_stream_V_data_V_1_sRdy, ap_sig_cseq_ST_st5_fsm_4, tmp_s_fu_261_p2, ap_sig_cseq_ST_st6_fsm_5, tmp_s_reg_431)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (tmp_s_fu_261_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_lv1_0 = tmp_s_reg_431)))) then 
            muar_stream_V_data_V_TDATA_blk_n <= muar_stream_V_data_V_1_sRdy;
        else 
            muar_stream_V_data_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    muar_stream_V_data_V_TVALID <= muar_stream_V_data_V_1_mVld;
    p_Result_11_fu_278_p4 <= tmp_data_V_1_reg_355(63 downto 32);
    p_Result_12_fu_287_p5 <= (p_Result_s_fu_266_p5(159 downto 64) & p_Result_11_fu_278_p4 & p_Result_s_fu_266_p5(31 downto 0));
    p_Result_13_fu_299_p4 <= tmp_data_V_1_reg_355(95 downto 64);
    p_Result_14_fu_308_p5 <= (p_Result_12_fu_287_p5(159 downto 96) & p_Result_13_fu_299_p4 & p_Result_12_fu_287_p5(63 downto 0));
    p_Result_15_fu_320_p5 <= (p_Result_14_fu_308_p5(159 downto 108) & loc_V_2_reg_373 & p_Result_14_fu_308_p5(95 downto 0));
    p_Result_16_fu_331_p5 <= (p_Result_15_fu_320_p5(159 downto 120) & loc_V_1_reg_367 & p_Result_15_fu_320_p5(107 downto 0));
    p_Result_17_fu_342_p5 <= (t_out_V_fu_256_p2 & p_Result_16_fu_331_p5(127 downto 0));
    p_Result_s_fu_266_p5 <= (ap_const_lv160_lc_1(159 downto 32) & p_val_V_3_fu_249_p3);
    p_val_V_3_fu_249_p3 <= 
        p_val_V_fu_245_p2 when (tmp_2_fu_240_p2(0) = '1') else 
        p_Val2_s_reg_420;
    p_val_V_fu_245_p2 <= std_logic_vector(unsigned(p_Val2_s_reg_420) - unsigned(p_Val2_3_reg_426));
    t_out_V_fu_256_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFF) + signed(loc_V_reg_361));
    tmp_1_cast_fu_198_p3 <= 
        ap_const_lv10_A0 when (j_reg_383(0) = '1') else 
        ap_const_lv10_0;
    tmp_2_fu_240_p2 <= "1" when (unsigned(loc_V_1_reg_367) < unsigned(ap_const_lv12_A0)) else "0";
        tmp_3_cast_fu_210_p1 <= std_logic_vector(resize(signed(tmp_3_fu_205_p2),64));

    tmp_3_fu_205_p2 <= std_logic_vector(unsigned(tmp_cast_reg_389) + unsigned(tmp_1_cast_fu_198_p3));
    tmp_5_cast_fu_215_p3 <= 
        ap_const_lv10_0 when (j_reg_383(0) = '1') else 
        ap_const_lv10_A0;
        tmp_6_cast_fu_232_p1 <= std_logic_vector(resize(signed(tmp_6_reg_400),64));

    tmp_6_fu_222_p2 <= std_logic_vector(unsigned(tmp_cast_reg_389) + unsigned(tmp_5_cast_fu_215_p3));
        tmp_7_cast_fu_236_p1 <= std_logic_vector(resize(signed(tmp_7_reg_405),64));

    tmp_7_fu_227_p2 <= std_logic_vector(unsigned(tmp_4_cast_reg_395) + unsigned(tmp_5_cast_fu_215_p3));
    tmp_s_fu_261_p2 <= "1" when (loc_V_reg_361 = ap_const_lv32_0) else "0";
end behav;
