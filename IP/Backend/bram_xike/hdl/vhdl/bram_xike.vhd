-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.1
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity bram_xike is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    p_doWrite : IN STD_LOGIC;
    din : IN STD_LOGIC_VECTOR (31 downto 0);
    p_doRead : IN STD_LOGIC;
    dout : OUT STD_LOGIC_VECTOR (31 downto 0);
    dout_ap_vld : OUT STD_LOGIC;
    p_addr_V : IN STD_LOGIC_VECTOR (15 downto 0);
    p_scale_read : IN STD_LOGIC;
    p_scale_addr_V : IN STD_LOGIC_VECTOR (7 downto 0);
    scale_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    scale_out_ap_vld : OUT STD_LOGIC;
    p_shift_read : IN STD_LOGIC;
    p_shift_addr_V : IN STD_LOGIC_VECTOR (7 downto 0);
    shift_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    shift_out_ap_vld : OUT STD_LOGIC;
    p_pca_read : IN STD_LOGIC;
    p_pca_addr_V : IN STD_LOGIC_VECTOR (15 downto 0);
    pca_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    pca_out_ap_vld : OUT STD_LOGIC;
    p_vq_read : IN STD_LOGIC;
    p_vq_addr_V : IN STD_LOGIC_VECTOR (15 downto 0);
    vq_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    vq_out_ap_vld : OUT STD_LOGIC;
    p_label_read : IN STD_LOGIC;
    p_label_addr_V : IN STD_LOGIC_VECTOR (15 downto 0);
    label_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    label_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of bram_xike is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "bram_xike,hls_ip_2016_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k325tffg900-2,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=3.410000,HLS_SYN_LAT=1,HLS_SYN_TPT=1,HLS_SYN_MEM=140,HLS_SYN_DSP=0,HLS_SYN_FF=12,HLS_SYN_LUT=273}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_pp0_stg0_fsm_0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_true : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv16_28 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000101000";
    constant ap_const_lv16_C8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000011001000";
    constant ap_const_lv16_CA8 : STD_LOGIC_VECTOR (15 downto 0) := "0000110010101000";
    constant ap_const_lv16_5AC8 : STD_LOGIC_VECTOR (15 downto 0) := "0101101011001000";
    constant ap_const_lv17_1A538 : STD_LOGIC_VECTOR (16 downto 0) := "11010010100111000";
    constant ap_const_lv17_1F358 : STD_LOGIC_VECTOR (16 downto 0) := "11111001101011000";
    constant ap_const_lv17_1FF38 : STD_LOGIC_VECTOR (16 downto 0) := "11111111100111000";
    constant ap_const_lv17_1FFD8 : STD_LOGIC_VECTOR (16 downto 0) := "11111111111011000";

    signal scale_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal scale_ce0 : STD_LOGIC;
    signal scale_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal scale_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal scale_ce1 : STD_LOGIC;
    signal scale_we1 : STD_LOGIC;
    signal scale_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shift_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal shift_ce0 : STD_LOGIC;
    signal shift_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal shift_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shift_ce1 : STD_LOGIC;
    signal shift_we1 : STD_LOGIC;
    signal shift_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal pca_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal pca_ce0 : STD_LOGIC;
    signal pca_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal pca_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal pca_ce1 : STD_LOGIC;
    signal pca_we1 : STD_LOGIC;
    signal pca_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal vq_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal vq_ce0 : STD_LOGIC;
    signal vq_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal vq_address1 : STD_LOGIC_VECTOR (14 downto 0);
    signal vq_ce1 : STD_LOGIC;
    signal vq_we1 : STD_LOGIC;
    signal vq_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal label_r_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal label_r_ce0 : STD_LOGIC;
    signal label_r_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal label_r_address1 : STD_LOGIC_VECTOR (14 downto 0);
    signal label_r_ce1 : STD_LOGIC;
    signal label_r_we1 : STD_LOGIC;
    signal label_r_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_label_read_read_reg_655 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_pp0_stg0_fsm_0 : STD_LOGIC;
    signal ap_sig_107 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal p_vq_read_read_reg_659 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_pca_read_read_reg_663 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_shift_read_read_reg_667 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_scale_read_read_reg_671 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_doRead_read_read_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_doRead_read_reg_675 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_doWrite_read_read_fu_196_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_doWrite_read_reg_679 : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_state_4_fu_517_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal mem_state_4_reg_708 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_7_fu_414_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_419_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_424_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_429_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_434_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_fu_535_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_fu_550_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_fu_565_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_fu_580_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_fu_585_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_fu_600_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_fu_615_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_fu_630_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_645_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_650_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_439_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_457_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_cast_fu_463_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_fu_445_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_fu_479_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_451_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_fu_491_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp7_fu_497_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_511_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_cast_fu_503_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal sel_tmp_fu_471_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal lhs_V_7_cast_fu_525_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_7_fu_529_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal lhs_V_6_cast_fu_540_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_6_fu_544_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal lhs_V_5_cast_fu_555_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_5_fu_559_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal lhs_V_4_cast_fu_570_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_4_fu_574_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal lhs_V_3_cast_fu_590_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_3_fu_594_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal lhs_V_2_cast_fu_605_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_2_fu_609_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal lhs_V_1_cast_fu_620_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_1_fu_624_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal lhs_V_cast_fu_635_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_fu_639_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_pprstidle_pp0 : STD_LOGIC;
    signal ap_sig_451 : BOOLEAN;
    signal ap_sig_159 : BOOLEAN;
    signal ap_sig_453 : BOOLEAN;
    signal ap_sig_456 : BOOLEAN;
    signal ap_sig_458 : BOOLEAN;
    signal ap_sig_460 : BOOLEAN;
    signal ap_sig_462 : BOOLEAN;

    component bram_xike_scale IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component bram_xike_shift IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component bram_xike_pca IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component bram_xike_vq IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    scale_U : component bram_xike_scale
    generic map (
        DataWidth => 32,
        AddressRange => 40,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => scale_address0,
        ce0 => scale_ce0,
        q0 => scale_q0,
        address1 => scale_address1,
        ce1 => scale_ce1,
        we1 => scale_we1,
        d1 => din,
        q1 => scale_q1);

    shift_U : component bram_xike_shift
    generic map (
        DataWidth => 32,
        AddressRange => 160,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => shift_address0,
        ce0 => shift_ce0,
        q0 => shift_q0,
        address1 => shift_address1,
        ce1 => shift_ce1,
        we1 => shift_we1,
        d1 => din,
        q1 => shift_q1);

    pca_U : component bram_xike_pca
    generic map (
        DataWidth => 32,
        AddressRange => 3040,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => pca_address0,
        ce0 => pca_ce0,
        q0 => pca_q0,
        address1 => pca_address1,
        ce1 => pca_ce1,
        we1 => pca_we1,
        d1 => din,
        q1 => pca_q1);

    vq_U : component bram_xike_vq
    generic map (
        DataWidth => 32,
        AddressRange => 20000,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => vq_address0,
        ce0 => vq_ce0,
        q0 => vq_q0,
        address1 => vq_address1,
        ce1 => vq_ce1,
        we1 => vq_we1,
        d1 => din,
        q1 => vq_q1);

    label_r_U : component bram_xike_vq
    generic map (
        DataWidth => 32,
        AddressRange => 20000,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => label_r_address0,
        ce0 => label_r_ce0,
        q0 => label_r_q0,
        address1 => label_r_address1,
        ce1 => label_r_ce1,
        we1 => label_r_we1,
        d1 => din,
        q1 => label_r_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_pp0_stg0_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0)) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0)) then
                mem_state_4_reg_708 <= mem_state_4_fu_517_p3;
                p_doRead_read_reg_675 <= (0=>p_doRead, others=>'-');
                p_doWrite_read_reg_679 <= (0=>p_doWrite, others=>'-');
                p_label_read_read_reg_655 <= (0=>p_label_read, others=>'-');
                p_pca_read_read_reg_663 <= (0=>p_pca_read, others=>'-');
                p_scale_read_read_reg_671 <= (0=>p_scale_read, others=>'-');
                p_shift_read_read_reg_667 <= (0=>p_shift_read, others=>'-');
                p_vq_read_read_reg_659 <= (0=>p_vq_read, others=>'-');
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_sig_pprstidle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_pp0_stg0_fsm_0 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;

    ap_sig_107_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_107 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_159_assign_proc : process(p_doRead_read_read_fu_184_p2, p_doWrite_read_read_fu_196_p2)
    begin
                ap_sig_159 <= ((p_doWrite_read_read_fu_196_p2 = ap_const_lv1_0) and not((p_doRead_read_read_fu_184_p2 = ap_const_lv1_0)));
    end process;


    ap_sig_451_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it1, p_doRead_read_reg_675, p_doWrite_read_reg_679)
    begin
                ap_sig_451 <= ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (p_doWrite_read_reg_679 = ap_const_lv1_0) and not((p_doRead_read_reg_675 = ap_const_lv1_0)));
    end process;


    ap_sig_453_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, mem_state_4_fu_517_p3)
    begin
                ap_sig_453 <= ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_const_logic_1) and (mem_state_4_fu_517_p3 = ap_const_lv3_4));
    end process;


    ap_sig_456_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, mem_state_4_fu_517_p3)
    begin
                ap_sig_456 <= ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_const_logic_1) and (mem_state_4_fu_517_p3 = ap_const_lv3_2));
    end process;


    ap_sig_458_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, mem_state_4_fu_517_p3)
    begin
                ap_sig_458 <= ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_const_logic_1) and (mem_state_4_fu_517_p3 = ap_const_lv3_0));
    end process;


    ap_sig_460_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, mem_state_4_fu_517_p3)
    begin
                ap_sig_460 <= ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_const_logic_1) and (mem_state_4_fu_517_p3 = ap_const_lv3_1));
    end process;


    ap_sig_462_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, mem_state_4_fu_517_p3)
    begin
                ap_sig_462 <= ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_const_logic_1) and (mem_state_4_fu_517_p3 = ap_const_lv3_3));
    end process;


    ap_sig_cseq_ST_pp0_stg0_fsm_0_assign_proc : process(ap_sig_107)
    begin
        if (ap_sig_107) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_sig_pprstidle_pp0 <= ap_const_logic_0;

    dout_assign_proc : process(scale_q1, shift_q1, pca_q1, vq_q1, label_r_q1, mem_state_4_reg_708, ap_sig_451)
    begin
        if (ap_sig_451) then
            if ((mem_state_4_reg_708 = ap_const_lv3_0)) then 
                dout <= scale_q1;
            elsif ((mem_state_4_reg_708 = ap_const_lv3_1)) then 
                dout <= shift_q1;
            elsif ((mem_state_4_reg_708 = ap_const_lv3_2)) then 
                dout <= pca_q1;
            elsif ((mem_state_4_reg_708 = ap_const_lv3_3)) then 
                dout <= vq_q1;
            elsif ((mem_state_4_reg_708 = ap_const_lv3_4)) then 
                dout <= label_r_q1;
            else 
                dout <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            dout <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dout_ap_vld_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it1, p_doRead_read_reg_675, p_doWrite_read_reg_679, mem_state_4_reg_708)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (p_doWrite_read_reg_679 = ap_const_lv1_0) and not((p_doRead_read_reg_675 = ap_const_lv1_0)) and (mem_state_4_reg_708 = ap_const_lv3_4)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (p_doWrite_read_reg_679 = ap_const_lv1_0) and not((p_doRead_read_reg_675 = ap_const_lv1_0)) and (mem_state_4_reg_708 = ap_const_lv3_3)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (p_doWrite_read_reg_679 = ap_const_lv1_0) and not((p_doRead_read_reg_675 = ap_const_lv1_0)) and (mem_state_4_reg_708 = ap_const_lv3_2)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (p_doWrite_read_reg_679 = ap_const_lv1_0) and not((p_doRead_read_reg_675 = ap_const_lv1_0)) and (mem_state_4_reg_708 = ap_const_lv3_1)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (p_doWrite_read_reg_679 = ap_const_lv1_0) and not((p_doRead_read_reg_675 = ap_const_lv1_0)) and (mem_state_4_reg_708 = ap_const_lv3_0)))) then 
            dout_ap_vld <= ap_const_logic_1;
        else 
            dout_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    label_out <= label_r_q0;

    label_out_ap_vld_assign_proc : process(p_label_read_read_reg_655, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((p_label_read_read_reg_655 = ap_const_lv1_0)))) then 
            label_out_ap_vld <= ap_const_logic_1;
        else 
            label_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    label_r_address0 <= tmp_1_fu_434_p1(15 - 1 downto 0);

    label_r_address1_assign_proc : process(p_doWrite_read_read_fu_196_p2, tmp_18_fu_535_p1, tmp_13_fu_600_p1, ap_sig_159, ap_sig_453)
    begin
        if (ap_sig_453) then
            if (not((p_doWrite_read_read_fu_196_p2 = ap_const_lv1_0))) then 
                label_r_address1 <= tmp_13_fu_600_p1(15 - 1 downto 0);
            elsif (ap_sig_159) then 
                label_r_address1 <= tmp_18_fu_535_p1(15 - 1 downto 0);
            else 
                label_r_address1 <= "XXXXXXXXXXXXXXX";
            end if;
        else 
            label_r_address1 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    label_r_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_const_logic_1))) then 
            label_r_ce0 <= ap_const_logic_1;
        else 
            label_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    label_r_ce1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, p_doRead_read_read_fu_184_p2, p_doWrite_read_read_fu_196_p2, mem_state_4_fu_517_p3)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_const_logic_1) and (p_doWrite_read_read_fu_196_p2 = ap_const_lv1_0) and not((p_doRead_read_read_fu_184_p2 = ap_const_lv1_0)) and (mem_state_4_fu_517_p3 = ap_const_lv3_4)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_const_logic_1) and (mem_state_4_fu_517_p3 = ap_const_lv3_4) and not((p_doWrite_read_read_fu_196_p2 = ap_const_lv1_0))))) then 
            label_r_ce1 <= ap_const_logic_1;
        else 
            label_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    label_r_we1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, p_doWrite_read_read_fu_196_p2, mem_state_4_fu_517_p3)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_const_logic_1) and (mem_state_4_fu_517_p3 = ap_const_lv3_4) and not((p_doWrite_read_read_fu_196_p2 = ap_const_lv1_0))))) then 
            label_r_we1 <= ap_const_logic_1;
        else 
            label_r_we1 <= ap_const_logic_0;
        end if; 
    end process;

    lhs_V_1_cast_fu_620_p1 <= std_logic_vector(resize(unsigned(p_addr_V),17));
    lhs_V_2_cast_fu_605_p1 <= std_logic_vector(resize(unsigned(p_addr_V),17));
    lhs_V_3_cast_fu_590_p1 <= std_logic_vector(resize(unsigned(p_addr_V),17));
    lhs_V_4_cast_fu_570_p1 <= std_logic_vector(resize(unsigned(p_addr_V),17));
    lhs_V_5_cast_fu_555_p1 <= std_logic_vector(resize(unsigned(p_addr_V),17));
    lhs_V_6_cast_fu_540_p1 <= std_logic_vector(resize(unsigned(p_addr_V),17));
    lhs_V_7_cast_fu_525_p1 <= std_logic_vector(resize(unsigned(p_addr_V),17));
    lhs_V_cast_fu_635_p1 <= std_logic_vector(resize(unsigned(p_addr_V),17));
    mem_state_4_fu_517_p3 <= 
        sel_tmp3_cast_fu_503_p3 when (tmp_fu_511_p2(0) = '1') else 
        sel_tmp_fu_471_p3;
    p_cast_fu_463_p3 <= 
        ap_const_lv3_0 when (tmp_2_fu_439_p2(0) = '1') else 
        ap_const_lv3_3;
    p_doRead_read_read_fu_184_p2 <= (0=>p_doRead, others=>'-');
    p_doWrite_read_read_fu_196_p2 <= (0=>p_doWrite, others=>'-');
    pca_address0 <= tmp_9_fu_424_p1(12 - 1 downto 0);

    pca_address1_assign_proc : process(p_doWrite_read_read_fu_196_p2, tmp_16_fu_565_p1, tmp_11_fu_630_p1, ap_sig_159, ap_sig_456)
    begin
        if (ap_sig_456) then
            if (not((p_doWrite_read_read_fu_196_p2 = ap_const_lv1_0))) then 
                pca_address1 <= tmp_11_fu_630_p1(12 - 1 downto 0);
            elsif (ap_sig_159) then 
                pca_address1 <= tmp_16_fu_565_p1(12 - 1 downto 0);
            else 
                pca_address1 <= "XXXXXXXXXXXX";
            end if;
        else 
            pca_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    pca_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_const_logic_1))) then 
            pca_ce0 <= ap_const_logic_1;
        else 
            pca_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pca_ce1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, p_doRead_read_read_fu_184_p2, p_doWrite_read_read_fu_196_p2, mem_state_4_fu_517_p3)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_const_logic_1) and (p_doWrite_read_read_fu_196_p2 = ap_const_lv1_0) and not((p_doRead_read_read_fu_184_p2 = ap_const_lv1_0)) and (mem_state_4_fu_517_p3 = ap_const_lv3_2)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_const_logic_1) and (mem_state_4_fu_517_p3 = ap_const_lv3_2) and not((p_doWrite_read_read_fu_196_p2 = ap_const_lv1_0))))) then 
            pca_ce1 <= ap_const_logic_1;
        else 
            pca_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    pca_out <= pca_q0;

    pca_out_ap_vld_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it1, p_pca_read_read_reg_663)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((p_pca_read_read_reg_663 = ap_const_lv1_0)))) then 
            pca_out_ap_vld <= ap_const_logic_1;
        else 
            pca_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    pca_we1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, p_doWrite_read_read_fu_196_p2, mem_state_4_fu_517_p3)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_const_logic_1) and (mem_state_4_fu_517_p3 = ap_const_lv3_2) and not((p_doWrite_read_read_fu_196_p2 = ap_const_lv1_0))))) then 
            pca_we1 <= ap_const_logic_1;
        else 
            pca_we1 <= ap_const_logic_0;
        end if; 
    end process;

    r_V_1_fu_624_p2 <= std_logic_vector(unsigned(lhs_V_1_cast_fu_620_p1) + unsigned(ap_const_lv17_1FF38));
    r_V_2_fu_609_p2 <= std_logic_vector(unsigned(lhs_V_2_cast_fu_605_p1) + unsigned(ap_const_lv17_1F358));
    r_V_3_fu_594_p2 <= std_logic_vector(unsigned(lhs_V_3_cast_fu_590_p1) + unsigned(ap_const_lv17_1A538));
    r_V_4_fu_574_p2 <= std_logic_vector(unsigned(lhs_V_4_cast_fu_570_p1) + unsigned(ap_const_lv17_1FFD8));
    r_V_5_fu_559_p2 <= std_logic_vector(unsigned(lhs_V_5_cast_fu_555_p1) + unsigned(ap_const_lv17_1FF38));
    r_V_6_fu_544_p2 <= std_logic_vector(unsigned(lhs_V_6_cast_fu_540_p1) + unsigned(ap_const_lv17_1F358));
    r_V_7_fu_529_p2 <= std_logic_vector(unsigned(lhs_V_7_cast_fu_525_p1) + unsigned(ap_const_lv17_1A538));
    r_V_fu_639_p2 <= std_logic_vector(unsigned(lhs_V_cast_fu_635_p1) + unsigned(ap_const_lv17_1FFD8));
    scale_address0 <= tmp_7_fu_414_p1(6 - 1 downto 0);

    scale_address1_assign_proc : process(p_doWrite_read_read_fu_196_p2, tmp_14_fu_585_p1, tmp_5_fu_650_p1, ap_sig_159, ap_sig_458)
    begin
        if (ap_sig_458) then
            if (not((p_doWrite_read_read_fu_196_p2 = ap_const_lv1_0))) then 
                scale_address1 <= tmp_5_fu_650_p1(6 - 1 downto 0);
            elsif (ap_sig_159) then 
                scale_address1 <= tmp_14_fu_585_p1(6 - 1 downto 0);
            else 
                scale_address1 <= "XXXXXX";
            end if;
        else 
            scale_address1 <= "XXXXXX";
        end if; 
    end process;


    scale_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_const_logic_1))) then 
            scale_ce0 <= ap_const_logic_1;
        else 
            scale_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    scale_ce1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, p_doRead_read_read_fu_184_p2, p_doWrite_read_read_fu_196_p2, mem_state_4_fu_517_p3)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_const_logic_1) and (p_doWrite_read_read_fu_196_p2 = ap_const_lv1_0) and not((p_doRead_read_read_fu_184_p2 = ap_const_lv1_0)) and (mem_state_4_fu_517_p3 = ap_const_lv3_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_const_logic_1) and (mem_state_4_fu_517_p3 = ap_const_lv3_0) and not((p_doWrite_read_read_fu_196_p2 = ap_const_lv1_0))))) then 
            scale_ce1 <= ap_const_logic_1;
        else 
            scale_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    scale_out <= scale_q0;

    scale_out_ap_vld_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it1, p_scale_read_read_reg_671)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((p_scale_read_read_reg_671 = ap_const_lv1_0)))) then 
            scale_out_ap_vld <= ap_const_logic_1;
        else 
            scale_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    scale_we1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, p_doWrite_read_read_fu_196_p2, mem_state_4_fu_517_p3)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_const_logic_1) and (mem_state_4_fu_517_p3 = ap_const_lv3_0) and not((p_doWrite_read_read_fu_196_p2 = ap_const_lv1_0))))) then 
            scale_we1 <= ap_const_logic_1;
        else 
            scale_we1 <= ap_const_logic_0;
        end if; 
    end process;

    sel_tmp1_fu_479_p2 <= (tmp_2_fu_439_p2 xor ap_const_lv1_1);
    sel_tmp2_fu_485_p2 <= (tmp_4_fu_445_p2 and sel_tmp1_fu_479_p2);
    sel_tmp3_cast_fu_503_p3 <= 
        ap_const_lv3_2 when (sel_tmp7_fu_497_p2(0) = '1') else 
        ap_const_lv3_1;
    sel_tmp6_fu_491_p2 <= (tmp_4_fu_445_p2 xor ap_const_lv1_1);
    sel_tmp7_fu_497_p2 <= (tmp_6_fu_451_p2 and sel_tmp6_fu_491_p2);
    sel_tmp_fu_471_p3 <= 
        p_cast_fu_463_p3 when (tmp_3_fu_457_p2(0) = '1') else 
        ap_const_lv3_4;
    shift_address0 <= tmp_8_fu_419_p1(8 - 1 downto 0);

    shift_address1_assign_proc : process(p_doWrite_read_read_fu_196_p2, tmp_15_fu_580_p1, tmp_10_fu_645_p1, ap_sig_159, ap_sig_460)
    begin
        if (ap_sig_460) then
            if (not((p_doWrite_read_read_fu_196_p2 = ap_const_lv1_0))) then 
                shift_address1 <= tmp_10_fu_645_p1(8 - 1 downto 0);
            elsif (ap_sig_159) then 
                shift_address1 <= tmp_15_fu_580_p1(8 - 1 downto 0);
            else 
                shift_address1 <= "XXXXXXXX";
            end if;
        else 
            shift_address1 <= "XXXXXXXX";
        end if; 
    end process;


    shift_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_const_logic_1))) then 
            shift_ce0 <= ap_const_logic_1;
        else 
            shift_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    shift_ce1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, p_doRead_read_read_fu_184_p2, p_doWrite_read_read_fu_196_p2, mem_state_4_fu_517_p3)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_const_logic_1) and (p_doWrite_read_read_fu_196_p2 = ap_const_lv1_0) and not((p_doRead_read_read_fu_184_p2 = ap_const_lv1_0)) and (mem_state_4_fu_517_p3 = ap_const_lv3_1)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_const_logic_1) and (mem_state_4_fu_517_p3 = ap_const_lv3_1) and not((p_doWrite_read_read_fu_196_p2 = ap_const_lv1_0))))) then 
            shift_ce1 <= ap_const_logic_1;
        else 
            shift_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    shift_out <= shift_q0;

    shift_out_ap_vld_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it1, p_shift_read_read_reg_667)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((p_shift_read_read_reg_667 = ap_const_lv1_0)))) then 
            shift_out_ap_vld <= ap_const_logic_1;
        else 
            shift_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    shift_we1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, p_doWrite_read_read_fu_196_p2, mem_state_4_fu_517_p3)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_const_logic_1) and (mem_state_4_fu_517_p3 = ap_const_lv3_1) and not((p_doWrite_read_read_fu_196_p2 = ap_const_lv1_0))))) then 
            shift_we1 <= ap_const_logic_1;
        else 
            shift_we1 <= ap_const_logic_0;
        end if; 
    end process;

        tmp_10_fu_645_p1 <= std_logic_vector(resize(signed(r_V_fu_639_p2),64));

        tmp_11_fu_630_p1 <= std_logic_vector(resize(signed(r_V_1_fu_624_p2),64));

        tmp_12_fu_615_p1 <= std_logic_vector(resize(signed(r_V_2_fu_609_p2),64));

        tmp_13_fu_600_p1 <= std_logic_vector(resize(signed(r_V_3_fu_594_p2),64));

    tmp_14_fu_585_p1 <= std_logic_vector(resize(unsigned(p_addr_V),64));
        tmp_15_fu_580_p1 <= std_logic_vector(resize(signed(r_V_4_fu_574_p2),64));

        tmp_16_fu_565_p1 <= std_logic_vector(resize(signed(r_V_5_fu_559_p2),64));

        tmp_17_fu_550_p1 <= std_logic_vector(resize(signed(r_V_6_fu_544_p2),64));

        tmp_18_fu_535_p1 <= std_logic_vector(resize(signed(r_V_7_fu_529_p2),64));

    tmp_1_fu_434_p1 <= std_logic_vector(resize(unsigned(p_label_addr_V),64));
    tmp_2_fu_439_p2 <= "1" when (unsigned(p_addr_V) < unsigned(ap_const_lv16_28)) else "0";
    tmp_3_fu_457_p2 <= "1" when (unsigned(p_addr_V) < unsigned(ap_const_lv16_5AC8)) else "0";
    tmp_4_fu_445_p2 <= "1" when (unsigned(p_addr_V) < unsigned(ap_const_lv16_C8)) else "0";
    tmp_5_fu_650_p1 <= std_logic_vector(resize(unsigned(p_addr_V),64));
    tmp_6_fu_451_p2 <= "1" when (unsigned(p_addr_V) < unsigned(ap_const_lv16_CA8)) else "0";
    tmp_7_fu_414_p1 <= std_logic_vector(resize(unsigned(p_scale_addr_V),64));
    tmp_8_fu_419_p1 <= std_logic_vector(resize(unsigned(p_shift_addr_V),64));
    tmp_9_fu_424_p1 <= std_logic_vector(resize(unsigned(p_pca_addr_V),64));
    tmp_fu_511_p2 <= (sel_tmp7_fu_497_p2 or sel_tmp2_fu_485_p2);
    tmp_s_fu_429_p1 <= std_logic_vector(resize(unsigned(p_vq_addr_V),64));
    vq_address0 <= tmp_s_fu_429_p1(15 - 1 downto 0);

    vq_address1_assign_proc : process(p_doWrite_read_read_fu_196_p2, tmp_17_fu_550_p1, tmp_12_fu_615_p1, ap_sig_159, ap_sig_462)
    begin
        if (ap_sig_462) then
            if (not((p_doWrite_read_read_fu_196_p2 = ap_const_lv1_0))) then 
                vq_address1 <= tmp_12_fu_615_p1(15 - 1 downto 0);
            elsif (ap_sig_159) then 
                vq_address1 <= tmp_17_fu_550_p1(15 - 1 downto 0);
            else 
                vq_address1 <= "XXXXXXXXXXXXXXX";
            end if;
        else 
            vq_address1 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    vq_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_const_logic_1))) then 
            vq_ce0 <= ap_const_logic_1;
        else 
            vq_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    vq_ce1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, p_doRead_read_read_fu_184_p2, p_doWrite_read_read_fu_196_p2, mem_state_4_fu_517_p3)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_const_logic_1) and (p_doWrite_read_read_fu_196_p2 = ap_const_lv1_0) and not((p_doRead_read_read_fu_184_p2 = ap_const_lv1_0)) and (mem_state_4_fu_517_p3 = ap_const_lv3_3)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_const_logic_1) and (mem_state_4_fu_517_p3 = ap_const_lv3_3) and not((p_doWrite_read_read_fu_196_p2 = ap_const_lv1_0))))) then 
            vq_ce1 <= ap_const_logic_1;
        else 
            vq_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    vq_out <= vq_q0;

    vq_out_ap_vld_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it1, p_vq_read_read_reg_659)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((p_vq_read_read_reg_659 = ap_const_lv1_0)))) then 
            vq_out_ap_vld <= ap_const_logic_1;
        else 
            vq_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    vq_we1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, p_doWrite_read_read_fu_196_p2, mem_state_4_fu_517_p3)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_const_logic_1) and (mem_state_4_fu_517_p3 = ap_const_lv3_3) and not((p_doWrite_read_read_fu_196_p2 = ap_const_lv1_0))))) then 
            vq_we1 <= ap_const_logic_1;
        else 
            vq_we1 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
