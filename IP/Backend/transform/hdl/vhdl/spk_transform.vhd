-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.1
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity spk_transform is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    spk_V_dout : IN STD_LOGIC_VECTOR (127 downto 0);
    spk_V_empty_n : IN STD_LOGIC;
    spk_V_read : OUT STD_LOGIC;
    scale_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    scale_V_ce0 : OUT STD_LOGIC;
    scale_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    shift_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    shift_V_ce0 : OUT STD_LOGIC;
    shift_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    pca_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    pca_V_ce0 : OUT STD_LOGIC;
    pca_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    pca_final_V_V_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    pca_final_V_V_TVALID : OUT STD_LOGIC );
end;


architecture behav of spk_transform is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "spk_transform,hls_ip_2016_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k325tffg900-2,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.223760,HLS_SYN_LAT=345,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=10,HLS_SYN_FF=7587,HLS_SYN_LUT=4981}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_pp0_stg0_fsm_2 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_st5_fsm_3 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_st6_fsm_4 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_st7_fsm_5 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_st8_fsm_6 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_st9_fsm_7 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_pp1_stg0_fsm_8 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_st19_fsm_9 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_st20_fsm_10 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_pp2_stg0_fsm_11 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_st24_fsm_12 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_st25_fsm_13 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_st26_fsm_14 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_st27_fsm_15 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_st28_fsm_16 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_st29_fsm_17 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_st30_fsm_18 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_st31_fsm_19 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_st32_fsm_20 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_st33_fsm_21 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_st34_fsm_22 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_st35_fsm_23 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_st36_fsm_24 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_st37_fsm_25 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_st38_fsm_26 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_st39_fsm_27 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_st40_fsm_28 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_st41_fsm_29 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_st42_fsm_30 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_st43_fsm_31 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_st44_fsm_32 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_st45_fsm_33 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_st46_fsm_34 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_st47_fsm_35 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_st48_fsm_36 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_st49_fsm_37 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_st50_fsm_38 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_st51_fsm_39 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_st52_fsm_40 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_st53_fsm_41 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_st54_fsm_42 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_st55_fsm_43 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_st56_fsm_44 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_st57_fsm_45 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_st58_fsm_46 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_st59_fsm_47 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_st60_fsm_48 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_st61_fsm_49 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_st62_fsm_50 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_st63_fsm_51 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_st64_fsm_52 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_st65_fsm_53 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_st66_fsm_54 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st67_fsm_55 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st68_fsm_56 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st69_fsm_57 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st70_fsm_58 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st71_fsm_59 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st72_fsm_60 : STD_LOGIC_VECTOR (69 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st73_fsm_61 : STD_LOGIC_VECTOR (69 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st74_fsm_62 : STD_LOGIC_VECTOR (69 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st75_fsm_63 : STD_LOGIC_VECTOR (69 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st76_fsm_64 : STD_LOGIC_VECTOR (69 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st77_fsm_65 : STD_LOGIC_VECTOR (69 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st78_fsm_66 : STD_LOGIC_VECTOR (69 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st79_fsm_67 : STD_LOGIC_VECTOR (69 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_pp3_stg0_fsm_68 : STD_LOGIC_VECTOR (69 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st83_fsm_69 : STD_LOGIC_VECTOR (69 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_true : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv5_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv5_B : STD_LOGIC_VECTOR (4 downto 0) := "01011";
    constant ap_const_lv5_C : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_const_lv5_D : STD_LOGIC_VECTOR (4 downto 0) := "01101";
    constant ap_const_lv5_E : STD_LOGIC_VECTOR (4 downto 0) := "01110";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv5_12 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv7_4C : STD_LOGIC_VECTOR (6 downto 0) := "1001100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_7D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000011111010000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_87 : BOOLEAN;
    signal pca_final_V_V_1_data_in : STD_LOGIC_VECTOR (31 downto 0);
    signal pca_final_V_V_1_vld_in : STD_LOGIC;
    signal pca_final_V_V_1_ack_in : STD_LOGIC;
    signal pca_final_V_V_1_data_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal pca_final_V_V_1_sRdy : STD_LOGIC;
    signal pca_final_V_V_1_mVld : STD_LOGIC := '0';
    signal pca_final_V_V_1_areset_d : STD_LOGIC;
    signal spk_comp_V_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_62 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_65 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_69 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_71 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_72 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_73 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_74 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_comp_V_75 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal data_V_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal data_V_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal data_V_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal data_V_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal scale_in_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_in_V_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_in_V_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_in_V_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_in_V_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal spk_V_blk_n : STD_LOGIC;
    signal ap_sig_cseq_ST_pp0_stg0_fsm_2 : STD_LOGIC;
    signal ap_sig_229 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal k_reg_412 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_1_reg_424 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_reg_ppstg_i_1_reg_424_pp1_iter1 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_pp1_stg0_fsm_8 : STD_LOGIC;
    signal ap_sig_246 : BOOLEAN;
    signal ap_reg_ppiten_pp1_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it4 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it5 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it6 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it7 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it8 : STD_LOGIC := '0';
    signal i_2_reg_436 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_4_reg_458 : STD_LOGIC_VECTOR (2 downto 0);
    signal reg_498 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_3 : STD_LOGIC;
    signal ap_sig_277 : BOOLEAN;
    signal ap_sig_cseq_ST_st19_fsm_9 : STD_LOGIC;
    signal ap_sig_284 : BOOLEAN;
    signal ap_sig_cseq_ST_st24_fsm_12 : STD_LOGIC;
    signal ap_sig_292 : BOOLEAN;
    signal exitcond5_fu_1807_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_fu_503_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_307 : BOOLEAN;
    signal i_5_fu_509_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond2_fu_543_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_reg_2002 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_1_fu_549_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_1_reg_2006 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_fu_555_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_2011 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1055_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_2015 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_7 : STD_LOGIC;
    signal ap_sig_332 : BOOLEAN;
    signal exitcond3_fu_1061_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond3_reg_2020 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond3_reg_2020_pp1_iter1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond3_reg_2020_pp1_iter2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond3_reg_2020_pp1_iter3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond3_reg_2020_pp1_iter4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond3_reg_2020_pp1_iter5 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond3_reg_2020_pp1_iter6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond3_reg_2020_pp1_iter7 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_6_fu_1067_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_6_reg_2024 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_8_fu_1077_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_2029 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_V_4_fu_1086_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal loc_V_4_reg_2039 : STD_LOGIC_VECTOR (7 downto 0);
    signal loc_V_5_reg_2044 : STD_LOGIC_VECTOR (7 downto 0);
    signal loc_V_6_reg_2049 : STD_LOGIC_VECTOR (7 downto 0);
    signal loc_V_7_reg_2054 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_1424_p78 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_2059 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_1582_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal grp_fu_1588_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_13_cast_reg_2092 : STD_LOGIC_VECTOR (38 downto 0);
    signal grp_fu_1597_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_18_cast_reg_2097 : STD_LOGIC_VECTOR (38 downto 0);
    signal grp_fu_1606_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_23_cast_reg_2102 : STD_LOGIC_VECTOR (38 downto 0);
    signal grp_fu_1615_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_28_cast_reg_2107 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_32_fu_1748_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_reg_2117 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st20_fsm_10 : STD_LOGIC;
    signal ap_sig_415 : BOOLEAN;
    signal exitcond4_fu_1754_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp2_stg0_fsm_11 : STD_LOGIC;
    signal ap_sig_424 : BOOLEAN;
    signal ap_reg_ppiten_pp2_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it2 : STD_LOGIC := '0';
    signal i_7_fu_1760_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_22_fu_1770_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_reg_2131 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_34_fu_1775_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_34_reg_2136 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_ppstg_tmp_34_reg_2136_pp2_iter1 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_8_fu_1813_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_8_reg_2148 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_35_fu_1819_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_35_reg_2153 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_Val2_14_fu_1867_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_14_reg_2157 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st25_fsm_13 : STD_LOGIC;
    signal ap_sig_463 : BOOLEAN;
    signal tmp_36_fu_1916_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_36_reg_2180 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st76_fsm_64 : STD_LOGIC;
    signal ap_sig_474 : BOOLEAN;
    signal exitcond_fu_1940_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_2188 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp3_stg0_fsm_68 : STD_LOGIC;
    signal ap_sig_483 : BOOLEAN;
    signal ap_reg_ppiten_pp3_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp3_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp3_it2 : STD_LOGIC := '0';
    signal i_9_fu_1946_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_37_fu_1952_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_37_reg_2197 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_V_2_fu_1973_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st79_fsm_67 : STD_LOGIC;
    signal ap_sig_521 : BOOLEAN;
    signal i_reg_401 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_phi_fu_416_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_1_phi_fu_428_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_3_reg_447 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st77_fsm_65 : STD_LOGIC;
    signal ap_sig_552 : BOOLEAN;
    signal tmp_9_fu_1082_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_1737_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_23_fu_1779_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loc_V_3_fu_581_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_515_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_V_fu_344 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_1_fu_348 : STD_LOGIC_VECTOR (31 downto 0);
    signal ch_fu_1041_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_cond_fu_1889_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st78_fsm_66 : STD_LOGIC;
    signal ap_sig_918 : BOOLEAN;
    signal grp_fu_1055_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_1_cast4_fu_1073_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1588_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1597_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1606_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1615_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_1621_p3 : STD_LOGIC_VECTOR (38 downto 0);
    signal p_Val2_4_fu_1629_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_13_fu_1650_p3 : STD_LOGIC_VECTOR (38 downto 0);
    signal p_Val2_6_fu_1658_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_16_fu_1679_p3 : STD_LOGIC_VECTOR (38 downto 0);
    signal p_Val2_8_fu_1687_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_19_fu_1708_p3 : STD_LOGIC_VECTOR (38 downto 0);
    signal p_Val2_10_fu_1716_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_32_fu_1748_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_cast3_fu_1766_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_12_fu_1823_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_13_fu_1853_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_fu_1877_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_fu_1883_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1910_p0 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_1910_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal p_Val2_16_fu_1956_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_fu_1969_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_st83_fsm_69 : STD_LOGIC;
    signal ap_sig_1264 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (69 downto 0);

    component spk_transform_mul_32s_8ns_32_5 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component spk_transform_mux_76to1_sel7_32_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        din26_WIDTH : INTEGER;
        din27_WIDTH : INTEGER;
        din28_WIDTH : INTEGER;
        din29_WIDTH : INTEGER;
        din30_WIDTH : INTEGER;
        din31_WIDTH : INTEGER;
        din32_WIDTH : INTEGER;
        din33_WIDTH : INTEGER;
        din34_WIDTH : INTEGER;
        din35_WIDTH : INTEGER;
        din36_WIDTH : INTEGER;
        din37_WIDTH : INTEGER;
        din38_WIDTH : INTEGER;
        din39_WIDTH : INTEGER;
        din40_WIDTH : INTEGER;
        din41_WIDTH : INTEGER;
        din42_WIDTH : INTEGER;
        din43_WIDTH : INTEGER;
        din44_WIDTH : INTEGER;
        din45_WIDTH : INTEGER;
        din46_WIDTH : INTEGER;
        din47_WIDTH : INTEGER;
        din48_WIDTH : INTEGER;
        din49_WIDTH : INTEGER;
        din50_WIDTH : INTEGER;
        din51_WIDTH : INTEGER;
        din52_WIDTH : INTEGER;
        din53_WIDTH : INTEGER;
        din54_WIDTH : INTEGER;
        din55_WIDTH : INTEGER;
        din56_WIDTH : INTEGER;
        din57_WIDTH : INTEGER;
        din58_WIDTH : INTEGER;
        din59_WIDTH : INTEGER;
        din60_WIDTH : INTEGER;
        din61_WIDTH : INTEGER;
        din62_WIDTH : INTEGER;
        din63_WIDTH : INTEGER;
        din64_WIDTH : INTEGER;
        din65_WIDTH : INTEGER;
        din66_WIDTH : INTEGER;
        din67_WIDTH : INTEGER;
        din68_WIDTH : INTEGER;
        din69_WIDTH : INTEGER;
        din70_WIDTH : INTEGER;
        din71_WIDTH : INTEGER;
        din72_WIDTH : INTEGER;
        din73_WIDTH : INTEGER;
        din74_WIDTH : INTEGER;
        din75_WIDTH : INTEGER;
        din76_WIDTH : INTEGER;
        din77_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (31 downto 0);
        din10 : IN STD_LOGIC_VECTOR (31 downto 0);
        din11 : IN STD_LOGIC_VECTOR (31 downto 0);
        din12 : IN STD_LOGIC_VECTOR (31 downto 0);
        din13 : IN STD_LOGIC_VECTOR (31 downto 0);
        din14 : IN STD_LOGIC_VECTOR (31 downto 0);
        din15 : IN STD_LOGIC_VECTOR (31 downto 0);
        din16 : IN STD_LOGIC_VECTOR (31 downto 0);
        din17 : IN STD_LOGIC_VECTOR (31 downto 0);
        din18 : IN STD_LOGIC_VECTOR (31 downto 0);
        din19 : IN STD_LOGIC_VECTOR (31 downto 0);
        din20 : IN STD_LOGIC_VECTOR (31 downto 0);
        din21 : IN STD_LOGIC_VECTOR (31 downto 0);
        din22 : IN STD_LOGIC_VECTOR (31 downto 0);
        din23 : IN STD_LOGIC_VECTOR (31 downto 0);
        din24 : IN STD_LOGIC_VECTOR (31 downto 0);
        din25 : IN STD_LOGIC_VECTOR (31 downto 0);
        din26 : IN STD_LOGIC_VECTOR (31 downto 0);
        din27 : IN STD_LOGIC_VECTOR (31 downto 0);
        din28 : IN STD_LOGIC_VECTOR (31 downto 0);
        din29 : IN STD_LOGIC_VECTOR (31 downto 0);
        din30 : IN STD_LOGIC_VECTOR (31 downto 0);
        din31 : IN STD_LOGIC_VECTOR (31 downto 0);
        din32 : IN STD_LOGIC_VECTOR (31 downto 0);
        din33 : IN STD_LOGIC_VECTOR (31 downto 0);
        din34 : IN STD_LOGIC_VECTOR (31 downto 0);
        din35 : IN STD_LOGIC_VECTOR (31 downto 0);
        din36 : IN STD_LOGIC_VECTOR (31 downto 0);
        din37 : IN STD_LOGIC_VECTOR (31 downto 0);
        din38 : IN STD_LOGIC_VECTOR (31 downto 0);
        din39 : IN STD_LOGIC_VECTOR (31 downto 0);
        din40 : IN STD_LOGIC_VECTOR (31 downto 0);
        din41 : IN STD_LOGIC_VECTOR (31 downto 0);
        din42 : IN STD_LOGIC_VECTOR (31 downto 0);
        din43 : IN STD_LOGIC_VECTOR (31 downto 0);
        din44 : IN STD_LOGIC_VECTOR (31 downto 0);
        din45 : IN STD_LOGIC_VECTOR (31 downto 0);
        din46 : IN STD_LOGIC_VECTOR (31 downto 0);
        din47 : IN STD_LOGIC_VECTOR (31 downto 0);
        din48 : IN STD_LOGIC_VECTOR (31 downto 0);
        din49 : IN STD_LOGIC_VECTOR (31 downto 0);
        din50 : IN STD_LOGIC_VECTOR (31 downto 0);
        din51 : IN STD_LOGIC_VECTOR (31 downto 0);
        din52 : IN STD_LOGIC_VECTOR (31 downto 0);
        din53 : IN STD_LOGIC_VECTOR (31 downto 0);
        din54 : IN STD_LOGIC_VECTOR (31 downto 0);
        din55 : IN STD_LOGIC_VECTOR (31 downto 0);
        din56 : IN STD_LOGIC_VECTOR (31 downto 0);
        din57 : IN STD_LOGIC_VECTOR (31 downto 0);
        din58 : IN STD_LOGIC_VECTOR (31 downto 0);
        din59 : IN STD_LOGIC_VECTOR (31 downto 0);
        din60 : IN STD_LOGIC_VECTOR (31 downto 0);
        din61 : IN STD_LOGIC_VECTOR (31 downto 0);
        din62 : IN STD_LOGIC_VECTOR (31 downto 0);
        din63 : IN STD_LOGIC_VECTOR (31 downto 0);
        din64 : IN STD_LOGIC_VECTOR (31 downto 0);
        din65 : IN STD_LOGIC_VECTOR (31 downto 0);
        din66 : IN STD_LOGIC_VECTOR (31 downto 0);
        din67 : IN STD_LOGIC_VECTOR (31 downto 0);
        din68 : IN STD_LOGIC_VECTOR (31 downto 0);
        din69 : IN STD_LOGIC_VECTOR (31 downto 0);
        din70 : IN STD_LOGIC_VECTOR (31 downto 0);
        din71 : IN STD_LOGIC_VECTOR (31 downto 0);
        din72 : IN STD_LOGIC_VECTOR (31 downto 0);
        din73 : IN STD_LOGIC_VECTOR (31 downto 0);
        din74 : IN STD_LOGIC_VECTOR (31 downto 0);
        din75 : IN STD_LOGIC_VECTOR (31 downto 0);
        din76 : IN STD_LOGIC_VECTOR (31 downto 0);
        din77 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component spk_transform_mul_32s_8s_39_5 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (38 downto 0) );
    end component;


    component spk_transform_mux_4to1_sel2_32_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component spk_transform_sdiv_48ns_32s_48_52 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (47 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;



begin
    spk_transform_mul_32s_8ns_32_5_U1 : component spk_transform_mul_32s_8ns_32_5
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 8,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_V_1_fu_348,
        din1 => grp_fu_1055_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1055_p2);

    spk_transform_mux_76to1_sel7_32_1_U2 : component spk_transform_mux_76to1_sel7_32_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 32,
        din14_WIDTH => 32,
        din15_WIDTH => 32,
        din16_WIDTH => 32,
        din17_WIDTH => 32,
        din18_WIDTH => 32,
        din19_WIDTH => 32,
        din20_WIDTH => 32,
        din21_WIDTH => 32,
        din22_WIDTH => 32,
        din23_WIDTH => 32,
        din24_WIDTH => 32,
        din25_WIDTH => 32,
        din26_WIDTH => 32,
        din27_WIDTH => 32,
        din28_WIDTH => 32,
        din29_WIDTH => 32,
        din30_WIDTH => 32,
        din31_WIDTH => 32,
        din32_WIDTH => 32,
        din33_WIDTH => 32,
        din34_WIDTH => 32,
        din35_WIDTH => 32,
        din36_WIDTH => 32,
        din37_WIDTH => 32,
        din38_WIDTH => 32,
        din39_WIDTH => 32,
        din40_WIDTH => 32,
        din41_WIDTH => 32,
        din42_WIDTH => 32,
        din43_WIDTH => 32,
        din44_WIDTH => 32,
        din45_WIDTH => 32,
        din46_WIDTH => 32,
        din47_WIDTH => 32,
        din48_WIDTH => 32,
        din49_WIDTH => 32,
        din50_WIDTH => 32,
        din51_WIDTH => 32,
        din52_WIDTH => 32,
        din53_WIDTH => 32,
        din54_WIDTH => 32,
        din55_WIDTH => 32,
        din56_WIDTH => 32,
        din57_WIDTH => 32,
        din58_WIDTH => 32,
        din59_WIDTH => 32,
        din60_WIDTH => 32,
        din61_WIDTH => 32,
        din62_WIDTH => 32,
        din63_WIDTH => 32,
        din64_WIDTH => 32,
        din65_WIDTH => 32,
        din66_WIDTH => 32,
        din67_WIDTH => 32,
        din68_WIDTH => 32,
        din69_WIDTH => 32,
        din70_WIDTH => 32,
        din71_WIDTH => 32,
        din72_WIDTH => 32,
        din73_WIDTH => 32,
        din74_WIDTH => 32,
        din75_WIDTH => 32,
        din76_WIDTH => 32,
        din77_WIDTH => 7,
        dout_WIDTH => 32)
    port map (
        din1 => spk_comp_V_0,
        din2 => spk_comp_V_1,
        din3 => spk_comp_V_2,
        din4 => spk_comp_V_3,
        din5 => spk_comp_V_4,
        din6 => spk_comp_V_5,
        din7 => spk_comp_V_6,
        din8 => spk_comp_V_7,
        din9 => spk_comp_V_8,
        din10 => spk_comp_V_9,
        din11 => spk_comp_V_10,
        din12 => spk_comp_V_11,
        din13 => spk_comp_V_12,
        din14 => spk_comp_V_13,
        din15 => spk_comp_V_14,
        din16 => spk_comp_V_15,
        din17 => spk_comp_V_16,
        din18 => spk_comp_V_17,
        din19 => spk_comp_V_18,
        din20 => spk_comp_V_19,
        din21 => spk_comp_V_20,
        din22 => spk_comp_V_21,
        din23 => spk_comp_V_22,
        din24 => spk_comp_V_23,
        din25 => spk_comp_V_24,
        din26 => spk_comp_V_25,
        din27 => spk_comp_V_26,
        din28 => spk_comp_V_27,
        din29 => spk_comp_V_28,
        din30 => spk_comp_V_29,
        din31 => spk_comp_V_30,
        din32 => spk_comp_V_31,
        din33 => spk_comp_V_32,
        din34 => spk_comp_V_33,
        din35 => spk_comp_V_34,
        din36 => spk_comp_V_35,
        din37 => spk_comp_V_36,
        din38 => spk_comp_V_37,
        din39 => spk_comp_V_38,
        din40 => spk_comp_V_39,
        din41 => spk_comp_V_40,
        din42 => spk_comp_V_41,
        din43 => spk_comp_V_42,
        din44 => spk_comp_V_43,
        din45 => spk_comp_V_44,
        din46 => spk_comp_V_45,
        din47 => spk_comp_V_46,
        din48 => spk_comp_V_47,
        din49 => spk_comp_V_48,
        din50 => spk_comp_V_49,
        din51 => spk_comp_V_50,
        din52 => spk_comp_V_51,
        din53 => spk_comp_V_52,
        din54 => spk_comp_V_53,
        din55 => spk_comp_V_54,
        din56 => spk_comp_V_55,
        din57 => spk_comp_V_56,
        din58 => spk_comp_V_57,
        din59 => spk_comp_V_58,
        din60 => spk_comp_V_59,
        din61 => spk_comp_V_60,
        din62 => spk_comp_V_61,
        din63 => spk_comp_V_62,
        din64 => spk_comp_V_63,
        din65 => spk_comp_V_64,
        din66 => spk_comp_V_65,
        din67 => spk_comp_V_66,
        din68 => spk_comp_V_67,
        din69 => spk_comp_V_68,
        din70 => spk_comp_V_69,
        din71 => spk_comp_V_70,
        din72 => spk_comp_V_71,
        din73 => spk_comp_V_72,
        din74 => spk_comp_V_73,
        din75 => spk_comp_V_74,
        din76 => spk_comp_V_75,
        din77 => ap_reg_ppstg_i_1_reg_424_pp1_iter1,
        dout => tmp_fu_1424_p78);

    spk_transform_mul_32s_8s_39_5_U3 : component spk_transform_mul_32s_8s_39_5
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 8,
        dout_WIDTH => 39)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1588_p0,
        din1 => loc_V_4_reg_2039,
        ce => ap_const_logic_1,
        dout => grp_fu_1588_p2);

    spk_transform_mul_32s_8s_39_5_U4 : component spk_transform_mul_32s_8s_39_5
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 8,
        dout_WIDTH => 39)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1597_p0,
        din1 => loc_V_5_reg_2044,
        ce => ap_const_logic_1,
        dout => grp_fu_1597_p2);

    spk_transform_mul_32s_8s_39_5_U5 : component spk_transform_mul_32s_8s_39_5
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 8,
        dout_WIDTH => 39)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1606_p0,
        din1 => loc_V_6_reg_2049,
        ce => ap_const_logic_1,
        dout => grp_fu_1606_p2);

    spk_transform_mul_32s_8s_39_5_U6 : component spk_transform_mul_32s_8s_39_5
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 8,
        dout_WIDTH => 39)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1615_p0,
        din1 => loc_V_7_reg_2054,
        ce => ap_const_logic_1,
        dout => grp_fu_1615_p2);

    spk_transform_mux_4to1_sel2_32_1_U7 : component spk_transform_mux_4to1_sel2_32_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din1 => data_V_0,
        din2 => data_V_1,
        din3 => data_V_2,
        din4 => data_V_3,
        din5 => tmp_35_fu_1819_p1,
        dout => p_Val2_12_fu_1823_p6);

    spk_transform_mux_4to1_sel2_32_1_U8 : component spk_transform_mux_4to1_sel2_32_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din1 => shift_in_V_0,
        din2 => shift_in_V_1,
        din3 => shift_in_V_2,
        din4 => shift_in_V_3,
        din5 => tmp_35_fu_1819_p1,
        dout => p_Val2_13_fu_1853_p6);

    spk_transform_sdiv_48ns_32s_48_52_U9 : component spk_transform_sdiv_48ns_32s_48_52
    generic map (
        ID => 1,
        NUM_STAGE => 52,
        din0_WIDTH => 48,
        din1_WIDTH => 32,
        dout_WIDTH => 48)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1910_p0,
        din1 => scale_in_V,
        ce => ap_const_logic_1,
        dout => grp_fu_1910_p2);

    spk_transform_mux_4to1_sel2_32_1_U10 : component spk_transform_mux_4to1_sel2_32_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din1 => data_V_0,
        din2 => data_V_1,
        din3 => data_V_2,
        din4 => data_V_3,
        din5 => tmp_37_reg_2197,
        dout => p_Val2_16_fu_1956_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (spk_V_empty_n = ap_const_logic_0))) and not((ap_const_lv1_0 = exitcond2_fu_543_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond1_fu_503_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (spk_V_empty_n = ap_const_logic_0))) and (ap_const_lv1_0 = exitcond2_fu_543_p2))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond1_fu_503_p2))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (spk_V_empty_n = ap_const_logic_0))) and not((ap_const_lv1_0 = exitcond2_fu_543_p2))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp1_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_8) and not((ap_const_lv1_0 = exitcond3_fu_1061_p2)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_7)) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp1_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_8) and (ap_const_lv1_0 = exitcond3_fu_1061_p2))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_7) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_8) and not((ap_const_lv1_0 = exitcond3_fu_1061_p2))))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp1_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it2 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it2 <= ap_reg_ppiten_pp1_it1;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp1_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it3 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it3 <= ap_reg_ppiten_pp1_it2;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp1_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it4 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it4 <= ap_reg_ppiten_pp1_it3;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp1_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it5 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it5 <= ap_reg_ppiten_pp1_it4;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp1_it6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it6 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it6 <= ap_reg_ppiten_pp1_it5;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp1_it7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it7 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it7 <= ap_reg_ppiten_pp1_it6;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp1_it8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it8 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it8 <= ap_reg_ppiten_pp1_it7;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp2_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_11) and not((ap_const_lv1_0 = exitcond4_fu_1754_p2)))) then 
                    ap_reg_ppiten_pp2_it0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_10)) then 
                    ap_reg_ppiten_pp2_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp2_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_11) and (ap_const_lv1_0 = exitcond4_fu_1754_p2))) then 
                    ap_reg_ppiten_pp2_it1 <= ap_const_logic_1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_10) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_11) and not((ap_const_lv1_0 = exitcond4_fu_1754_p2))))) then 
                    ap_reg_ppiten_pp2_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp2_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it2 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp2_it2 <= ap_reg_ppiten_pp2_it1;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp3_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp3_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_68) and not((ap_const_lv1_0 = exitcond_fu_1940_p2)))) then 
                    ap_reg_ppiten_pp3_it0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st79_fsm_67)) then 
                    ap_reg_ppiten_pp3_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp3_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp3_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_68) and (ap_const_lv1_0 = exitcond_fu_1940_p2))) then 
                    ap_reg_ppiten_pp3_it1 <= ap_const_logic_1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st79_fsm_67) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_68) and not((ap_const_lv1_0 = exitcond_fu_1940_p2))))) then 
                    ap_reg_ppiten_pp3_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp3_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp3_it2 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp3_it2 <= ap_reg_ppiten_pp3_it1;
            end if;
        end if;
    end process;


    pca_final_V_V_1_mVld_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                pca_final_V_V_1_mVld <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = pca_final_V_V_1_vld_in)) then 
                    pca_final_V_V_1_mVld <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = ap_const_logic_1)) then 
                    pca_final_V_V_1_mVld <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    data_V_0_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st77_fsm_65) and (tmp_35_reg_2153 = ap_const_lv2_0))) then 
                data_V_0 <= tmp_36_reg_2180;
            elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it8) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond3_reg_2020_pp1_iter7))) then 
                data_V_0 <= p_Val2_4_fu_1629_p2(38 downto 7);
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond1_fu_503_p2) and (tmp_5_fu_515_p1 = ap_const_lv2_0))) then 
                data_V_0 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    data_V_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st77_fsm_65) and (tmp_35_reg_2153 = ap_const_lv2_1))) then 
                data_V_1 <= tmp_36_reg_2180;
            elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it8) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond3_reg_2020_pp1_iter7))) then 
                data_V_1 <= p_Val2_6_fu_1658_p2(38 downto 7);
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond1_fu_503_p2) and (tmp_5_fu_515_p1 = ap_const_lv2_1))) then 
                data_V_1 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    data_V_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st77_fsm_65) and (tmp_35_reg_2153 = ap_const_lv2_2))) then 
                data_V_2 <= tmp_36_reg_2180;
            elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it8) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond3_reg_2020_pp1_iter7))) then 
                data_V_2 <= p_Val2_8_fu_1687_p2(38 downto 7);
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond1_fu_503_p2) and (tmp_5_fu_515_p1 = ap_const_lv2_2))) then 
                data_V_2 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    data_V_3_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st77_fsm_65) and (tmp_35_reg_2153 = ap_const_lv2_3))) then 
                data_V_3 <= tmp_36_reg_2180;
            elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it8) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond3_reg_2020_pp1_iter7))) then 
                data_V_3 <= p_Val2_10_fu_1716_p2(38 downto 7);
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond1_fu_503_p2) and (tmp_5_fu_515_p1 = ap_const_lv2_3))) then 
                data_V_3 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i_1_reg_424_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_7)) then 
                i_1_reg_424 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_8) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_lv1_0 = exitcond3_reg_2020))) then 
                i_1_reg_424 <= i_6_reg_2024;
            end if; 
        end if;
    end process;

    i_2_reg_436_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_11) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and (ap_const_lv1_0 = exitcond4_fu_1754_p2))) then 
                i_2_reg_436 <= i_7_fu_1760_p2;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_10)) then 
                i_2_reg_436 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_3_reg_447_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_11) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and not((ap_const_lv1_0 = exitcond4_fu_1754_p2)))) then 
                i_3_reg_447 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st77_fsm_65)) then 
                i_3_reg_447 <= i_8_reg_2148;
            end if; 
        end if;
    end process;

    i_4_reg_458_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_68) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_lv1_0 = exitcond_fu_1940_p2))) then 
                i_4_reg_458 <= i_9_fu_1946_p2;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st79_fsm_67)) then 
                i_4_reg_458 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_reg_401_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond1_fu_503_p2))) then 
                i_reg_401 <= i_5_fu_509_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_401 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    k_reg_412_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond1_fu_503_p2)))) then 
                k_reg_412 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (spk_V_empty_n = ap_const_logic_0))) and (ap_const_lv1_0 = exitcond2_reg_2002))) then 
                k_reg_412 <= k_1_reg_2006;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_8)) then
                ap_reg_ppstg_exitcond3_reg_2020_pp1_iter1 <= exitcond3_reg_2020;
                ap_reg_ppstg_i_1_reg_424_pp1_iter1 <= i_1_reg_424;
                exitcond3_reg_2020 <= exitcond3_fu_1061_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_true = ap_true)) then
                ap_reg_ppstg_exitcond3_reg_2020_pp1_iter2 <= ap_reg_ppstg_exitcond3_reg_2020_pp1_iter1;
                ap_reg_ppstg_exitcond3_reg_2020_pp1_iter3 <= ap_reg_ppstg_exitcond3_reg_2020_pp1_iter2;
                ap_reg_ppstg_exitcond3_reg_2020_pp1_iter4 <= ap_reg_ppstg_exitcond3_reg_2020_pp1_iter3;
                ap_reg_ppstg_exitcond3_reg_2020_pp1_iter5 <= ap_reg_ppstg_exitcond3_reg_2020_pp1_iter4;
                ap_reg_ppstg_exitcond3_reg_2020_pp1_iter6 <= ap_reg_ppstg_exitcond3_reg_2020_pp1_iter5;
                ap_reg_ppstg_exitcond3_reg_2020_pp1_iter7 <= ap_reg_ppstg_exitcond3_reg_2020_pp1_iter6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_11)) then
                ap_reg_ppstg_tmp_34_reg_2136_pp2_iter1 <= tmp_34_reg_2136;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (spk_V_empty_n = ap_const_logic_0))))) then
                exitcond2_reg_2002 <= exitcond2_fu_543_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_68)) then
                exitcond_reg_2188 <= exitcond_fu_1940_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_8) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))) then
                i_6_reg_2024 <= i_6_fu_1067_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_12)) then
                i_8_reg_2148 <= i_8_fu_1813_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (spk_V_empty_n = ap_const_logic_0))))) then
                k_1_reg_2006 <= k_1_fu_549_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_lv1_0 = ap_reg_ppstg_exitcond3_reg_2020_pp1_iter1)) then
                loc_V_4_reg_2039 <= loc_V_4_fu_1086_p1;
                loc_V_5_reg_2044 <= pca_V_q0(15 downto 8);
                loc_V_6_reg_2049 <= pca_V_q0(23 downto 16);
                loc_V_7_reg_2054 <= pca_V_q0(31 downto 24);
                tmp_reg_2059 <= tmp_fu_1424_p78;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_12) and (exitcond5_fu_1807_p2 = ap_const_lv1_0))) then
                p_Val2_14_reg_2157 <= p_Val2_14_fu_1867_p2;
                tmp_35_reg_2153 <= tmp_35_fu_1819_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_const_logic_1)) then
                pca_final_V_V_1_areset_d <= ap_rst_n_inv;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = pca_final_V_V_1_vld_in) and (ap_const_logic_1 = pca_final_V_V_1_sRdy))) then
                pca_final_V_V_1_data_reg <= pca_final_V_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_9) or ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_12) and not((exitcond5_fu_1807_p2 = ap_const_lv1_0))))) then
                reg_498 <= tmp_V_1_fu_348;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_10)) then
                scale_in_V <= scale_V_q0;
                    tmp_32_reg_2117(31 downto 2) <= tmp_32_fu_1748_p2(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp2_it2) and (ap_reg_ppstg_tmp_34_reg_2136_pp2_iter1 = ap_const_lv2_0))) then
                shift_in_V_0 <= shift_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp2_it2) and (ap_reg_ppstg_tmp_34_reg_2136_pp2_iter1 = ap_const_lv2_1))) then
                shift_in_V_1 <= shift_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp2_it2) and (ap_reg_ppstg_tmp_34_reg_2136_pp2_iter1 = ap_const_lv2_2))) then
                shift_in_V_2 <= shift_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp2_it2) and (ap_reg_ppstg_tmp_34_reg_2136_pp2_iter1 = ap_const_lv2_3))) then
                shift_in_V_3 <= shift_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (spk_V_empty_n = ap_const_logic_0))) and (ap_const_lv1_0 = tmp_3_reg_2011) and (k_reg_412 = ap_const_lv5_1))) then
                spk_comp_V_0 <= spk_V_dout(127 downto 96);
                spk_comp_V_19 <= spk_V_dout(95 downto 64);
                spk_comp_V_38 <= spk_V_dout(63 downto 32);
                spk_comp_V_57 <= loc_V_3_fu_581_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (spk_V_empty_n = ap_const_logic_0))) and (ap_const_lv1_0 = tmp_3_reg_2011) and (k_reg_412 = ap_const_lv5_2))) then
                spk_comp_V_1 <= spk_V_dout(127 downto 96);
                spk_comp_V_20 <= spk_V_dout(95 downto 64);
                spk_comp_V_39 <= spk_V_dout(63 downto 32);
                spk_comp_V_58 <= loc_V_3_fu_581_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (spk_V_empty_n = ap_const_logic_0))) and (ap_const_lv1_0 = tmp_3_reg_2011) and (k_reg_412 = ap_const_lv5_B))) then
                spk_comp_V_10 <= spk_V_dout(127 downto 96);
                spk_comp_V_29 <= spk_V_dout(95 downto 64);
                spk_comp_V_48 <= spk_V_dout(63 downto 32);
                spk_comp_V_67 <= loc_V_3_fu_581_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (spk_V_empty_n = ap_const_logic_0))) and (ap_const_lv1_0 = tmp_3_reg_2011) and (k_reg_412 = ap_const_lv5_C))) then
                spk_comp_V_11 <= spk_V_dout(127 downto 96);
                spk_comp_V_30 <= spk_V_dout(95 downto 64);
                spk_comp_V_49 <= spk_V_dout(63 downto 32);
                spk_comp_V_68 <= loc_V_3_fu_581_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (spk_V_empty_n = ap_const_logic_0))) and (ap_const_lv1_0 = tmp_3_reg_2011) and (k_reg_412 = ap_const_lv5_D))) then
                spk_comp_V_12 <= spk_V_dout(127 downto 96);
                spk_comp_V_31 <= spk_V_dout(95 downto 64);
                spk_comp_V_50 <= spk_V_dout(63 downto 32);
                spk_comp_V_69 <= loc_V_3_fu_581_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (spk_V_empty_n = ap_const_logic_0))) and (ap_const_lv1_0 = tmp_3_reg_2011) and (k_reg_412 = ap_const_lv5_E))) then
                spk_comp_V_13 <= spk_V_dout(127 downto 96);
                spk_comp_V_32 <= spk_V_dout(95 downto 64);
                spk_comp_V_51 <= spk_V_dout(63 downto 32);
                spk_comp_V_70 <= loc_V_3_fu_581_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (spk_V_empty_n = ap_const_logic_0))) and (ap_const_lv1_0 = tmp_3_reg_2011) and (k_reg_412 = ap_const_lv5_F))) then
                spk_comp_V_14 <= spk_V_dout(127 downto 96);
                spk_comp_V_33 <= spk_V_dout(95 downto 64);
                spk_comp_V_52 <= spk_V_dout(63 downto 32);
                spk_comp_V_71 <= loc_V_3_fu_581_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (spk_V_empty_n = ap_const_logic_0))) and (ap_const_lv1_0 = tmp_3_reg_2011) and (k_reg_412 = ap_const_lv5_10))) then
                spk_comp_V_15 <= spk_V_dout(127 downto 96);
                spk_comp_V_34 <= spk_V_dout(95 downto 64);
                spk_comp_V_53 <= spk_V_dout(63 downto 32);
                spk_comp_V_72 <= loc_V_3_fu_581_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (spk_V_empty_n = ap_const_logic_0))) and (ap_const_lv1_0 = tmp_3_reg_2011) and (k_reg_412 = ap_const_lv5_11))) then
                spk_comp_V_16 <= spk_V_dout(127 downto 96);
                spk_comp_V_35 <= spk_V_dout(95 downto 64);
                spk_comp_V_54 <= spk_V_dout(63 downto 32);
                spk_comp_V_73 <= loc_V_3_fu_581_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (spk_V_empty_n = ap_const_logic_0))) and (ap_const_lv1_0 = tmp_3_reg_2011) and (k_reg_412 = ap_const_lv5_12))) then
                spk_comp_V_17 <= spk_V_dout(127 downto 96);
                spk_comp_V_36 <= spk_V_dout(95 downto 64);
                spk_comp_V_55 <= spk_V_dout(63 downto 32);
                spk_comp_V_74 <= loc_V_3_fu_581_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (spk_V_empty_n = ap_const_logic_0))) and (ap_const_lv1_0 = tmp_3_reg_2011) and not((k_reg_412 = ap_const_lv5_1)) and not((k_reg_412 = ap_const_lv5_2)) and not((k_reg_412 = ap_const_lv5_3)) and not((k_reg_412 = ap_const_lv5_4)) and not((k_reg_412 = ap_const_lv5_5)) and not((k_reg_412 = ap_const_lv5_6)) and not((k_reg_412 = ap_const_lv5_7)) and not((k_reg_412 = ap_const_lv5_8)) and not((k_reg_412 = ap_const_lv5_9)) and not((k_reg_412 = ap_const_lv5_A)) and not((k_reg_412 = ap_const_lv5_B)) and not((k_reg_412 = ap_const_lv5_C)) and not((k_reg_412 = ap_const_lv5_D)) and not((k_reg_412 = ap_const_lv5_E)) and not((k_reg_412 = ap_const_lv5_F)) and not((k_reg_412 = ap_const_lv5_10)) and not((k_reg_412 = ap_const_lv5_11)) and not((k_reg_412 = ap_const_lv5_12)))) then
                spk_comp_V_18 <= spk_V_dout(127 downto 96);
                spk_comp_V_37 <= spk_V_dout(95 downto 64);
                spk_comp_V_56 <= spk_V_dout(63 downto 32);
                spk_comp_V_75 <= loc_V_3_fu_581_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (spk_V_empty_n = ap_const_logic_0))) and (ap_const_lv1_0 = tmp_3_reg_2011) and (k_reg_412 = ap_const_lv5_3))) then
                spk_comp_V_2 <= spk_V_dout(127 downto 96);
                spk_comp_V_21 <= spk_V_dout(95 downto 64);
                spk_comp_V_40 <= spk_V_dout(63 downto 32);
                spk_comp_V_59 <= loc_V_3_fu_581_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (spk_V_empty_n = ap_const_logic_0))) and (ap_const_lv1_0 = tmp_3_reg_2011) and (k_reg_412 = ap_const_lv5_4))) then
                spk_comp_V_22 <= spk_V_dout(95 downto 64);
                spk_comp_V_3 <= spk_V_dout(127 downto 96);
                spk_comp_V_41 <= spk_V_dout(63 downto 32);
                spk_comp_V_60 <= loc_V_3_fu_581_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (spk_V_empty_n = ap_const_logic_0))) and (ap_const_lv1_0 = tmp_3_reg_2011) and (k_reg_412 = ap_const_lv5_5))) then
                spk_comp_V_23 <= spk_V_dout(95 downto 64);
                spk_comp_V_4 <= spk_V_dout(127 downto 96);
                spk_comp_V_42 <= spk_V_dout(63 downto 32);
                spk_comp_V_61 <= loc_V_3_fu_581_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (spk_V_empty_n = ap_const_logic_0))) and (ap_const_lv1_0 = tmp_3_reg_2011) and (k_reg_412 = ap_const_lv5_6))) then
                spk_comp_V_24 <= spk_V_dout(95 downto 64);
                spk_comp_V_43 <= spk_V_dout(63 downto 32);
                spk_comp_V_5 <= spk_V_dout(127 downto 96);
                spk_comp_V_62 <= loc_V_3_fu_581_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (spk_V_empty_n = ap_const_logic_0))) and (ap_const_lv1_0 = tmp_3_reg_2011) and (k_reg_412 = ap_const_lv5_7))) then
                spk_comp_V_25 <= spk_V_dout(95 downto 64);
                spk_comp_V_44 <= spk_V_dout(63 downto 32);
                spk_comp_V_6 <= spk_V_dout(127 downto 96);
                spk_comp_V_63 <= loc_V_3_fu_581_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (spk_V_empty_n = ap_const_logic_0))) and (ap_const_lv1_0 = tmp_3_reg_2011) and (k_reg_412 = ap_const_lv5_8))) then
                spk_comp_V_26 <= spk_V_dout(95 downto 64);
                spk_comp_V_45 <= spk_V_dout(63 downto 32);
                spk_comp_V_64 <= loc_V_3_fu_581_p1;
                spk_comp_V_7 <= spk_V_dout(127 downto 96);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (spk_V_empty_n = ap_const_logic_0))) and (ap_const_lv1_0 = tmp_3_reg_2011) and (k_reg_412 = ap_const_lv5_9))) then
                spk_comp_V_27 <= spk_V_dout(95 downto 64);
                spk_comp_V_46 <= spk_V_dout(63 downto 32);
                spk_comp_V_65 <= loc_V_3_fu_581_p1;
                spk_comp_V_8 <= spk_V_dout(127 downto 96);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (spk_V_empty_n = ap_const_logic_0))) and (ap_const_lv1_0 = tmp_3_reg_2011) and (k_reg_412 = ap_const_lv5_A))) then
                spk_comp_V_28 <= spk_V_dout(95 downto 64);
                spk_comp_V_47 <= spk_V_dout(63 downto 32);
                spk_comp_V_66 <= loc_V_3_fu_581_p1;
                spk_comp_V_9 <= spk_V_dout(127 downto 96);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_lv1_0 = ap_reg_ppstg_exitcond3_reg_2020_pp1_iter6)) then
                tmp_13_cast_reg_2092 <= grp_fu_1588_p2;
                tmp_18_cast_reg_2097 <= grp_fu_1597_p2;
                tmp_23_cast_reg_2102 <= grp_fu_1606_p2;
                tmp_28_cast_reg_2107 <= grp_fu_1615_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_11) and (ap_const_lv1_0 = exitcond4_fu_1754_p2))) then
                tmp_22_reg_2131 <= tmp_22_fu_1770_p2;
                tmp_34_reg_2136 <= tmp_34_fu_1775_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_7)) then
                tmp_2_reg_2015 <= grp_fu_1055_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st76_fsm_64)) then
                tmp_36_reg_2180 <= tmp_36_fu_1916_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_68) and (ap_const_lv1_0 = exitcond_fu_1940_p2))) then
                tmp_37_reg_2197 <= tmp_37_fu_1952_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (spk_V_empty_n = ap_const_logic_0))) and (ap_const_lv1_0 = exitcond2_fu_543_p2))) then
                tmp_3_reg_2011 <= tmp_3_fu_555_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_8) and (ap_const_lv1_0 = exitcond3_fu_1061_p2))) then
                tmp_8_reg_2029 <= tmp_8_fu_1077_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (spk_V_empty_n = ap_const_logic_0))) and not((ap_const_lv1_0 = tmp_3_reg_2011)))) then
                tmp_V_1_fu_348 <= ch_fu_1041_p1;
                tmp_V_fu_344 <= spk_V_dout(63 downto 32);
            end if;
        end if;
    end process;
    tmp_32_reg_2117(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, spk_V_empty_n, pca_final_V_V_1_ack_in, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp1_it0, ap_reg_ppiten_pp1_it1, ap_reg_ppiten_pp1_it7, ap_reg_ppiten_pp1_it8, exitcond5_fu_1807_p2, exitcond1_fu_503_p2, exitcond2_fu_543_p2, exitcond3_fu_1061_p2, exitcond4_fu_1754_p2, ap_reg_ppiten_pp2_it0, ap_reg_ppiten_pp2_it1, ap_reg_ppiten_pp2_it2, exitcond_fu_1940_p2, ap_reg_ppiten_pp3_it0, ap_reg_ppiten_pp3_it1, ap_reg_ppiten_pp3_it2, or_cond_fu_1889_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((ap_const_lv1_0 = exitcond1_fu_503_p2))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_pp0_stg0_fsm_2 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (spk_V_empty_n = ap_const_logic_0))) and not((ap_const_lv1_0 = exitcond2_fu_543_p2))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (spk_V_empty_n = ap_const_logic_0))) and not((ap_const_lv1_0 = exitcond2_fu_543_p2)))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                end if;
            when ap_ST_st5_fsm_3 => 
                ap_NS_fsm <= ap_ST_st6_fsm_4;
            when ap_ST_st6_fsm_4 => 
                ap_NS_fsm <= ap_ST_st7_fsm_5;
            when ap_ST_st7_fsm_5 => 
                ap_NS_fsm <= ap_ST_st8_fsm_6;
            when ap_ST_st8_fsm_6 => 
                ap_NS_fsm <= ap_ST_st9_fsm_7;
            when ap_ST_st9_fsm_7 => 
                ap_NS_fsm <= ap_ST_pp1_stg0_fsm_8;
            when ap_ST_pp1_stg0_fsm_8 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it8) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it7)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_const_lv1_0 = exitcond3_fu_1061_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_8;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_const_lv1_0 = exitcond3_fu_1061_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) then
                    ap_NS_fsm <= ap_ST_st19_fsm_9;
                else
                    ap_NS_fsm <= ap_ST_st19_fsm_9;
                end if;
            when ap_ST_st19_fsm_9 => 
                ap_NS_fsm <= ap_ST_st20_fsm_10;
            when ap_ST_st20_fsm_10 => 
                ap_NS_fsm <= ap_ST_pp2_stg0_fsm_11;
            when ap_ST_pp2_stg0_fsm_11 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it2) and not((ap_const_logic_1 = ap_reg_ppiten_pp2_it1)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and not((ap_const_lv1_0 = exitcond4_fu_1754_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp2_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp2_stg0_fsm_11;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and not((ap_const_lv1_0 = exitcond4_fu_1754_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp2_it1)))) then
                    ap_NS_fsm <= ap_ST_st24_fsm_12;
                else
                    ap_NS_fsm <= ap_ST_st24_fsm_12;
                end if;
            when ap_ST_st24_fsm_12 => 
                if ((not((exitcond5_fu_1807_p2 = ap_const_lv1_0)) and (ap_const_lv1_0 = or_cond_fu_1889_p2))) then
                    ap_NS_fsm <= ap_ST_st83_fsm_69;
                elsif ((not((exitcond5_fu_1807_p2 = ap_const_lv1_0)) and not((ap_const_lv1_0 = or_cond_fu_1889_p2)))) then
                    ap_NS_fsm <= ap_ST_st78_fsm_66;
                else
                    ap_NS_fsm <= ap_ST_st25_fsm_13;
                end if;
            when ap_ST_st25_fsm_13 => 
                ap_NS_fsm <= ap_ST_st26_fsm_14;
            when ap_ST_st26_fsm_14 => 
                ap_NS_fsm <= ap_ST_st27_fsm_15;
            when ap_ST_st27_fsm_15 => 
                ap_NS_fsm <= ap_ST_st28_fsm_16;
            when ap_ST_st28_fsm_16 => 
                ap_NS_fsm <= ap_ST_st29_fsm_17;
            when ap_ST_st29_fsm_17 => 
                ap_NS_fsm <= ap_ST_st30_fsm_18;
            when ap_ST_st30_fsm_18 => 
                ap_NS_fsm <= ap_ST_st31_fsm_19;
            when ap_ST_st31_fsm_19 => 
                ap_NS_fsm <= ap_ST_st32_fsm_20;
            when ap_ST_st32_fsm_20 => 
                ap_NS_fsm <= ap_ST_st33_fsm_21;
            when ap_ST_st33_fsm_21 => 
                ap_NS_fsm <= ap_ST_st34_fsm_22;
            when ap_ST_st34_fsm_22 => 
                ap_NS_fsm <= ap_ST_st35_fsm_23;
            when ap_ST_st35_fsm_23 => 
                ap_NS_fsm <= ap_ST_st36_fsm_24;
            when ap_ST_st36_fsm_24 => 
                ap_NS_fsm <= ap_ST_st37_fsm_25;
            when ap_ST_st37_fsm_25 => 
                ap_NS_fsm <= ap_ST_st38_fsm_26;
            when ap_ST_st38_fsm_26 => 
                ap_NS_fsm <= ap_ST_st39_fsm_27;
            when ap_ST_st39_fsm_27 => 
                ap_NS_fsm <= ap_ST_st40_fsm_28;
            when ap_ST_st40_fsm_28 => 
                ap_NS_fsm <= ap_ST_st41_fsm_29;
            when ap_ST_st41_fsm_29 => 
                ap_NS_fsm <= ap_ST_st42_fsm_30;
            when ap_ST_st42_fsm_30 => 
                ap_NS_fsm <= ap_ST_st43_fsm_31;
            when ap_ST_st43_fsm_31 => 
                ap_NS_fsm <= ap_ST_st44_fsm_32;
            when ap_ST_st44_fsm_32 => 
                ap_NS_fsm <= ap_ST_st45_fsm_33;
            when ap_ST_st45_fsm_33 => 
                ap_NS_fsm <= ap_ST_st46_fsm_34;
            when ap_ST_st46_fsm_34 => 
                ap_NS_fsm <= ap_ST_st47_fsm_35;
            when ap_ST_st47_fsm_35 => 
                ap_NS_fsm <= ap_ST_st48_fsm_36;
            when ap_ST_st48_fsm_36 => 
                ap_NS_fsm <= ap_ST_st49_fsm_37;
            when ap_ST_st49_fsm_37 => 
                ap_NS_fsm <= ap_ST_st50_fsm_38;
            when ap_ST_st50_fsm_38 => 
                ap_NS_fsm <= ap_ST_st51_fsm_39;
            when ap_ST_st51_fsm_39 => 
                ap_NS_fsm <= ap_ST_st52_fsm_40;
            when ap_ST_st52_fsm_40 => 
                ap_NS_fsm <= ap_ST_st53_fsm_41;
            when ap_ST_st53_fsm_41 => 
                ap_NS_fsm <= ap_ST_st54_fsm_42;
            when ap_ST_st54_fsm_42 => 
                ap_NS_fsm <= ap_ST_st55_fsm_43;
            when ap_ST_st55_fsm_43 => 
                ap_NS_fsm <= ap_ST_st56_fsm_44;
            when ap_ST_st56_fsm_44 => 
                ap_NS_fsm <= ap_ST_st57_fsm_45;
            when ap_ST_st57_fsm_45 => 
                ap_NS_fsm <= ap_ST_st58_fsm_46;
            when ap_ST_st58_fsm_46 => 
                ap_NS_fsm <= ap_ST_st59_fsm_47;
            when ap_ST_st59_fsm_47 => 
                ap_NS_fsm <= ap_ST_st60_fsm_48;
            when ap_ST_st60_fsm_48 => 
                ap_NS_fsm <= ap_ST_st61_fsm_49;
            when ap_ST_st61_fsm_49 => 
                ap_NS_fsm <= ap_ST_st62_fsm_50;
            when ap_ST_st62_fsm_50 => 
                ap_NS_fsm <= ap_ST_st63_fsm_51;
            when ap_ST_st63_fsm_51 => 
                ap_NS_fsm <= ap_ST_st64_fsm_52;
            when ap_ST_st64_fsm_52 => 
                ap_NS_fsm <= ap_ST_st65_fsm_53;
            when ap_ST_st65_fsm_53 => 
                ap_NS_fsm <= ap_ST_st66_fsm_54;
            when ap_ST_st66_fsm_54 => 
                ap_NS_fsm <= ap_ST_st67_fsm_55;
            when ap_ST_st67_fsm_55 => 
                ap_NS_fsm <= ap_ST_st68_fsm_56;
            when ap_ST_st68_fsm_56 => 
                ap_NS_fsm <= ap_ST_st69_fsm_57;
            when ap_ST_st69_fsm_57 => 
                ap_NS_fsm <= ap_ST_st70_fsm_58;
            when ap_ST_st70_fsm_58 => 
                ap_NS_fsm <= ap_ST_st71_fsm_59;
            when ap_ST_st71_fsm_59 => 
                ap_NS_fsm <= ap_ST_st72_fsm_60;
            when ap_ST_st72_fsm_60 => 
                ap_NS_fsm <= ap_ST_st73_fsm_61;
            when ap_ST_st73_fsm_61 => 
                ap_NS_fsm <= ap_ST_st74_fsm_62;
            when ap_ST_st74_fsm_62 => 
                ap_NS_fsm <= ap_ST_st75_fsm_63;
            when ap_ST_st75_fsm_63 => 
                ap_NS_fsm <= ap_ST_st76_fsm_64;
            when ap_ST_st76_fsm_64 => 
                ap_NS_fsm <= ap_ST_st77_fsm_65;
            when ap_ST_st77_fsm_65 => 
                ap_NS_fsm <= ap_ST_st24_fsm_12;
            when ap_ST_st78_fsm_66 => 
                ap_NS_fsm <= ap_ST_st79_fsm_67;
            when ap_ST_st79_fsm_67 => 
                ap_NS_fsm <= ap_ST_pp3_stg0_fsm_68;
            when ap_ST_pp3_stg0_fsm_68 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp3_it2) and not((ap_const_logic_1 = ap_reg_ppiten_pp3_it1)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and not((ap_const_lv1_0 = exitcond_fu_1940_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp3_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp3_stg0_fsm_68;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and not((ap_const_lv1_0 = exitcond_fu_1940_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp3_it1)))) then
                    ap_NS_fsm <= ap_ST_st83_fsm_69;
                else
                    ap_NS_fsm <= ap_ST_st83_fsm_69;
                end if;
            when ap_ST_st83_fsm_69 => 
                if (not((pca_final_V_V_1_ack_in = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st83_fsm_69;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    ap_done_assign_proc : process(pca_final_V_V_1_ack_in, ap_sig_cseq_ST_st83_fsm_69)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st83_fsm_69) and not((pca_final_V_V_1_ack_in = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(pca_final_V_V_1_ack_in, ap_sig_cseq_ST_st83_fsm_69)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st83_fsm_69) and not((pca_final_V_V_1_ack_in = ap_const_logic_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_1264_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_1264 <= (ap_const_lv1_1 = ap_CS_fsm(69 downto 69));
    end process;


    ap_sig_229_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_229 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_246_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_246 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    ap_sig_277_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_277 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_284_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_284 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    ap_sig_292_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_292 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    ap_sig_307_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_307 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_332_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_332 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    ap_sig_415_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_415 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    ap_sig_424_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_424 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    ap_sig_463_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_463 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    ap_sig_474_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_474 <= (ap_const_lv1_1 = ap_CS_fsm(64 downto 64));
    end process;


    ap_sig_483_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_483 <= (ap_const_lv1_1 = ap_CS_fsm(68 downto 68));
    end process;


    ap_sig_521_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_521 <= (ap_const_lv1_1 = ap_CS_fsm(67 downto 67));
    end process;


    ap_sig_552_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_552 <= (ap_const_lv1_1 = ap_CS_fsm(65 downto 65));
    end process;


    ap_sig_87_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_87 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_918_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_918 <= (ap_const_lv1_1 = ap_CS_fsm(66 downto 66));
    end process;


    ap_sig_cseq_ST_pp0_stg0_fsm_2_assign_proc : process(ap_sig_229)
    begin
        if (ap_sig_229) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_pp1_stg0_fsm_8_assign_proc : process(ap_sig_246)
    begin
        if (ap_sig_246) then 
            ap_sig_cseq_ST_pp1_stg0_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg0_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_pp2_stg0_fsm_11_assign_proc : process(ap_sig_424)
    begin
        if (ap_sig_424) then 
            ap_sig_cseq_ST_pp2_stg0_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp2_stg0_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_pp3_stg0_fsm_68_assign_proc : process(ap_sig_483)
    begin
        if (ap_sig_483) then 
            ap_sig_cseq_ST_pp3_stg0_fsm_68 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp3_stg0_fsm_68 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st19_fsm_9_assign_proc : process(ap_sig_284)
    begin
        if (ap_sig_284) then 
            ap_sig_cseq_ST_st19_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st19_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_87)
    begin
        if (ap_sig_87) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st20_fsm_10_assign_proc : process(ap_sig_415)
    begin
        if (ap_sig_415) then 
            ap_sig_cseq_ST_st20_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st20_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st24_fsm_12_assign_proc : process(ap_sig_292)
    begin
        if (ap_sig_292) then 
            ap_sig_cseq_ST_st24_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st24_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st25_fsm_13_assign_proc : process(ap_sig_463)
    begin
        if (ap_sig_463) then 
            ap_sig_cseq_ST_st25_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st25_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_307)
    begin
        if (ap_sig_307) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st5_fsm_3_assign_proc : process(ap_sig_277)
    begin
        if (ap_sig_277) then 
            ap_sig_cseq_ST_st5_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st76_fsm_64_assign_proc : process(ap_sig_474)
    begin
        if (ap_sig_474) then 
            ap_sig_cseq_ST_st76_fsm_64 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st76_fsm_64 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st77_fsm_65_assign_proc : process(ap_sig_552)
    begin
        if (ap_sig_552) then 
            ap_sig_cseq_ST_st77_fsm_65 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st77_fsm_65 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st78_fsm_66_assign_proc : process(ap_sig_918)
    begin
        if (ap_sig_918) then 
            ap_sig_cseq_ST_st78_fsm_66 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st78_fsm_66 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st79_fsm_67_assign_proc : process(ap_sig_521)
    begin
        if (ap_sig_521) then 
            ap_sig_cseq_ST_st79_fsm_67 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st79_fsm_67 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st83_fsm_69_assign_proc : process(ap_sig_1264)
    begin
        if (ap_sig_1264) then 
            ap_sig_cseq_ST_st83_fsm_69 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st83_fsm_69 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st9_fsm_7_assign_proc : process(ap_sig_332)
    begin
        if (ap_sig_332) then 
            ap_sig_cseq_ST_st9_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;

    ch_fu_1041_p1 <= spk_V_dout(32 - 1 downto 0);
    exitcond1_fu_503_p2 <= "1" when (i_reg_401 = ap_const_lv3_4) else "0";
    exitcond2_fu_543_p2 <= "1" when (k_phi_fu_416_p4 = ap_const_lv5_14) else "0";
    exitcond3_fu_1061_p2 <= "1" when (i_1_phi_fu_428_p4 = ap_const_lv7_4C) else "0";
    exitcond4_fu_1754_p2 <= "1" when (i_2_reg_436 = ap_const_lv3_4) else "0";
    exitcond5_fu_1807_p2 <= "1" when (i_3_reg_447 = ap_const_lv3_4) else "0";
    exitcond_fu_1940_p2 <= "1" when (i_4_reg_458 = ap_const_lv3_4) else "0";
    grp_fu_1055_p1 <= ap_const_lv32_4C(8 - 1 downto 0);
    grp_fu_1588_p0 <= tmp_4_fu_1582_p1(32 - 1 downto 0);
    grp_fu_1597_p0 <= tmp_4_fu_1582_p1(32 - 1 downto 0);
    grp_fu_1606_p0 <= tmp_4_fu_1582_p1(32 - 1 downto 0);
    grp_fu_1615_p0 <= tmp_4_fu_1582_p1(32 - 1 downto 0);
    grp_fu_1910_p0 <= (p_Val2_14_reg_2157 & ap_const_lv16_0);
    i_1_cast4_fu_1073_p1 <= std_logic_vector(resize(unsigned(i_1_phi_fu_428_p4),32));

    i_1_phi_fu_428_p4_assign_proc : process(i_1_reg_424, ap_sig_cseq_ST_pp1_stg0_fsm_8, ap_reg_ppiten_pp1_it1, exitcond3_reg_2020, i_6_reg_2024)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_8) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_lv1_0 = exitcond3_reg_2020))) then 
            i_1_phi_fu_428_p4 <= i_6_reg_2024;
        else 
            i_1_phi_fu_428_p4 <= i_1_reg_424;
        end if; 
    end process;

    i_2_cast3_fu_1766_p1 <= std_logic_vector(resize(unsigned(i_2_reg_436),32));
    i_5_fu_509_p2 <= std_logic_vector(unsigned(i_reg_401) + unsigned(ap_const_lv3_1));
    i_6_fu_1067_p2 <= std_logic_vector(unsigned(i_1_phi_fu_428_p4) + unsigned(ap_const_lv7_1));
    i_7_fu_1760_p2 <= std_logic_vector(unsigned(i_2_reg_436) + unsigned(ap_const_lv3_1));
    i_8_fu_1813_p2 <= std_logic_vector(unsigned(i_3_reg_447) + unsigned(ap_const_lv3_1));
    i_9_fu_1946_p2 <= std_logic_vector(unsigned(i_4_reg_458) + unsigned(ap_const_lv3_1));
    k_1_fu_549_p2 <= std_logic_vector(unsigned(k_phi_fu_416_p4) + unsigned(ap_const_lv5_1));

    k_phi_fu_416_p4_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_reg_ppiten_pp0_it1, k_reg_412, exitcond2_reg_2002, k_1_reg_2006)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_lv1_0 = exitcond2_reg_2002))) then 
            k_phi_fu_416_p4 <= k_1_reg_2006;
        else 
            k_phi_fu_416_p4 <= k_reg_412;
        end if; 
    end process;

    loc_V_3_fu_581_p1 <= spk_V_dout(32 - 1 downto 0);
    loc_V_4_fu_1086_p1 <= pca_V_q0(8 - 1 downto 0);
    or_cond_fu_1889_p2 <= (tmp_24_fu_1877_p2 and tmp_25_fu_1883_p2);
    p_Val2_10_fu_1716_p2 <= std_logic_vector(unsigned(tmp_19_fu_1708_p3) + unsigned(tmp_28_cast_reg_2107));
    p_Val2_14_fu_1867_p2 <= std_logic_vector(unsigned(p_Val2_12_fu_1823_p6) + unsigned(p_Val2_13_fu_1853_p6));
    p_Val2_4_fu_1629_p2 <= std_logic_vector(unsigned(tmp_10_fu_1621_p3) + unsigned(tmp_13_cast_reg_2092));
    p_Val2_6_fu_1658_p2 <= std_logic_vector(unsigned(tmp_13_fu_1650_p3) + unsigned(tmp_18_cast_reg_2097));
    p_Val2_8_fu_1687_p2 <= std_logic_vector(unsigned(tmp_16_fu_1679_p3) + unsigned(tmp_23_cast_reg_2102));
    pca_V_address0 <= tmp_9_fu_1082_p1(12 - 1 downto 0);

    pca_V_ce0_assign_proc : process(ap_sig_cseq_ST_pp1_stg0_fsm_8, ap_reg_ppiten_pp1_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_8) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) then 
            pca_V_ce0 <= ap_const_logic_1;
        else 
            pca_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pca_final_V_V_1_ack_in_assign_proc : process(pca_final_V_V_1_mVld, pca_final_V_V_1_areset_d)
    begin
        pca_final_V_V_1_ack_in <= (not(pca_final_V_V_1_areset_d) and (ap_const_logic_1 or not(pca_final_V_V_1_mVld)));
    end process;


    pca_final_V_V_1_data_in_assign_proc : process(reg_498, ap_sig_cseq_ST_st24_fsm_12, exitcond5_fu_1807_p2, exitcond_reg_2188, ap_sig_cseq_ST_pp3_stg0_fsm_68, ap_reg_ppiten_pp3_it1, tmp_V_2_fu_1973_p1, tmp_V_fu_344, or_cond_fu_1889_p2, ap_sig_cseq_ST_st78_fsm_66)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_68) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_lv1_0 = exitcond_reg_2188))) then 
            pca_final_V_V_1_data_in <= tmp_V_2_fu_1973_p1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st78_fsm_66)) then 
            pca_final_V_V_1_data_in <= reg_498;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_12) and not((exitcond5_fu_1807_p2 = ap_const_lv1_0)) and not((ap_const_lv1_0 = or_cond_fu_1889_p2)))) then 
            pca_final_V_V_1_data_in <= tmp_V_fu_344;
        else 
            pca_final_V_V_1_data_in <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    pca_final_V_V_1_sRdy_assign_proc : process(pca_final_V_V_1_mVld, pca_final_V_V_1_areset_d)
    begin
        pca_final_V_V_1_sRdy <= (not(pca_final_V_V_1_areset_d) and (ap_const_logic_1 or not(pca_final_V_V_1_mVld)));
    end process;


    pca_final_V_V_1_vld_in_assign_proc : process(ap_sig_cseq_ST_st24_fsm_12, exitcond5_fu_1807_p2, exitcond_reg_2188, ap_sig_cseq_ST_pp3_stg0_fsm_68, ap_reg_ppiten_pp3_it1, or_cond_fu_1889_p2, ap_sig_cseq_ST_st78_fsm_66)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_68) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_lv1_0 = exitcond_reg_2188)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_12) and not((exitcond5_fu_1807_p2 = ap_const_lv1_0)) and not((ap_const_lv1_0 = or_cond_fu_1889_p2))) or (ap_const_logic_1 = ap_sig_cseq_ST_st78_fsm_66))) then 
            pca_final_V_V_1_vld_in <= ap_const_logic_1;
        else 
            pca_final_V_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    pca_final_V_V_TDATA <= pca_final_V_V_1_data_reg;
    pca_final_V_V_TVALID <= pca_final_V_V_1_mVld;
    ret_V_fu_1969_p1 <= p_Val2_16_fu_1956_p6(16 - 1 downto 0);
    scale_V_address0 <= tmp_s_fu_1737_p1(6 - 1 downto 0);

    scale_V_ce0_assign_proc : process(ap_sig_cseq_ST_st19_fsm_9)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_9)) then 
            scale_V_ce0 <= ap_const_logic_1;
        else 
            scale_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    shift_V_address0 <= tmp_23_fu_1779_p1(8 - 1 downto 0);

    shift_V_ce0_assign_proc : process(ap_sig_cseq_ST_pp2_stg0_fsm_11, ap_reg_ppiten_pp2_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_11) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1))) then 
            shift_V_ce0 <= ap_const_logic_1;
        else 
            shift_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    spk_V_blk_n_assign_proc : process(spk_V_empty_n, ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            spk_V_blk_n <= spk_V_empty_n;
        else 
            spk_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    spk_V_read_assign_proc : process(spk_V_empty_n, ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (spk_V_empty_n = ap_const_logic_0))))) then 
            spk_V_read <= ap_const_logic_1;
        else 
            spk_V_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_1621_p3 <= (data_V_0 & ap_const_lv7_0);
    tmp_13_fu_1650_p3 <= (data_V_1 & ap_const_lv7_0);
    tmp_16_fu_1679_p3 <= (data_V_2 & ap_const_lv7_0);
    tmp_19_fu_1708_p3 <= (data_V_3 & ap_const_lv7_0);
    tmp_22_fu_1770_p2 <= std_logic_vector(unsigned(i_2_cast3_fu_1766_p1) + unsigned(tmp_32_reg_2117));
        tmp_23_fu_1779_p1 <= std_logic_vector(resize(signed(tmp_22_reg_2131),64));

    tmp_24_fu_1877_p2 <= "1" when (signed(tmp_V_1_fu_348) < signed(ap_const_lv32_28)) else "0";
    tmp_25_fu_1883_p2 <= "1" when (signed(tmp_V_fu_344) > signed(ap_const_lv32_7D0)) else "0";
    tmp_32_fu_1748_p0 <= reg_498;
    tmp_32_fu_1748_p2 <= std_logic_vector(shift_left(unsigned(tmp_32_fu_1748_p0),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    tmp_34_fu_1775_p1 <= i_2_reg_436(2 - 1 downto 0);
    tmp_35_fu_1819_p1 <= i_3_reg_447(2 - 1 downto 0);
    tmp_36_fu_1916_p1 <= grp_fu_1910_p2(32 - 1 downto 0);
    tmp_37_fu_1952_p1 <= i_4_reg_458(2 - 1 downto 0);
    tmp_3_fu_555_p2 <= "1" when (k_phi_fu_416_p4 = ap_const_lv5_0) else "0";
        tmp_4_fu_1582_p1 <= std_logic_vector(resize(signed(tmp_reg_2059),39));

    tmp_5_fu_515_p1 <= i_reg_401(2 - 1 downto 0);
    tmp_8_fu_1077_p2 <= std_logic_vector(unsigned(i_1_cast4_fu_1073_p1) + unsigned(tmp_2_reg_2015));
        tmp_9_fu_1082_p1 <= std_logic_vector(resize(signed(tmp_8_reg_2029),64));

        tmp_V_2_fu_1973_p1 <= std_logic_vector(resize(signed(ret_V_fu_1969_p1),32));

        tmp_s_fu_1737_p1 <= std_logic_vector(resize(signed(tmp_V_1_fu_348),64));

end behav;
