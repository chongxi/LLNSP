-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.1
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity rt_feedback is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    target_unit_id_V : IN STD_LOGIC_VECTOR (15 downto 0);
    fet_packet_spk_id_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    fet_packet_spk_id_V_empty_n : IN STD_LOGIC;
    fet_packet_spk_id_V_read : OUT STD_LOGIC;
    stim_V : OUT STD_LOGIC_VECTOR (0 downto 0);
    stim_V_ap_vld : OUT STD_LOGIC );
end;


architecture behav of rt_feedback is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "rt_feedback,hls_ip_2016_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k325tffg900-2,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.210000,HLS_SYN_LAT=12508,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=48,HLS_SYN_LUT=66}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv15_61A8 : STD_LOGIC_VECTOR (14 downto 0) := "110000110101000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_24 : BOOLEAN;
    signal grp_rt_feedback_read_packet_fu_65_fet_packet_spk_id_V_blk_n : STD_LOGIC;
    signal fet_packet_spk_id_V_blk_n : STD_LOGIC;
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_48 : BOOLEAN;
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_56 : BOOLEAN;
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_64 : BOOLEAN;
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_72 : BOOLEAN;
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_80 : BOOLEAN;
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_88 : BOOLEAN;
    signal ap_sig_95 : BOOLEAN;
    signal grp_rt_feedback_read_packet_fu_65_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal condition_0_reg_90 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_79_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_109 : BOOLEAN;
    signal grp_rt_feedback_read_packet_fu_65_ap_start : STD_LOGIC;
    signal grp_rt_feedback_read_packet_fu_65_ap_done : STD_LOGIC;
    signal grp_rt_feedback_read_packet_fu_65_ap_idle : STD_LOGIC;
    signal grp_rt_feedback_read_packet_fu_65_ap_ready : STD_LOGIC;
    signal grp_rt_feedback_read_packet_fu_65_fet_packet_spk_id_V_read : STD_LOGIC;
    signal i_i_reg_54 : STD_LOGIC_VECTOR (14 downto 0);
    signal exitcond_i_fu_73_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_137 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_191 : BOOLEAN;

    component rt_feedback_read_packet IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        fet_packet_spk_id_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        fet_packet_spk_id_V_empty_n : IN STD_LOGIC;
        fet_packet_spk_id_V_read : OUT STD_LOGIC;
        target_unit_id_V : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (0 downto 0);
        fet_packet_spk_id_V_blk_n : OUT STD_LOGIC );
    end component;



begin
    grp_rt_feedback_read_packet_fu_65 : component rt_feedback_read_packet
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_rt_feedback_read_packet_fu_65_ap_start,
        ap_done => grp_rt_feedback_read_packet_fu_65_ap_done,
        ap_idle => grp_rt_feedback_read_packet_fu_65_ap_idle,
        ap_ready => grp_rt_feedback_read_packet_fu_65_ap_ready,
        fet_packet_spk_id_V_dout => fet_packet_spk_id_V_dout,
        fet_packet_spk_id_V_empty_n => fet_packet_spk_id_V_empty_n,
        fet_packet_spk_id_V_read => grp_rt_feedback_read_packet_fu_65_fet_packet_spk_id_V_read,
        target_unit_id_V => target_unit_id_V,
        ap_return => grp_rt_feedback_read_packet_fu_65_ap_return,
        fet_packet_spk_id_V_blk_n => grp_rt_feedback_read_packet_fu_65_fet_packet_spk_id_V_blk_n);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_i_reg_54_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (not((condition_0_reg_90 = ap_const_lv1_0))) then
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
                    i_i_reg_54 <= ap_const_lv15_0;
                elsif (ap_sig_191) then 
                    i_i_reg_54 <= i_fu_79_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((grp_rt_feedback_read_packet_fu_65_fet_packet_spk_id_V_blk_n = ap_const_logic_0)))) then
                condition_0_reg_90 <= grp_rt_feedback_read_packet_fu_65_ap_return;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, grp_rt_feedback_read_packet_fu_65_fet_packet_spk_id_V_blk_n, ap_sig_95, condition_0_reg_90, exitcond_i_fu_73_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_95)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((grp_rt_feedback_read_packet_fu_65_fet_packet_spk_id_V_blk_n = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((grp_rt_feedback_read_packet_fu_65_fet_packet_spk_id_V_blk_n = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st4_fsm_3 => 
                if (not((grp_rt_feedback_read_packet_fu_65_fet_packet_spk_id_V_blk_n = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st5_fsm_4 => 
                if (not((grp_rt_feedback_read_packet_fu_65_fet_packet_spk_id_V_blk_n = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st6_fsm_5 => 
                if (not((grp_rt_feedback_read_packet_fu_65_fet_packet_spk_id_V_blk_n = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when ap_ST_st7_fsm_6 => 
                if (not((grp_rt_feedback_read_packet_fu_65_fet_packet_spk_id_V_blk_n = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                end if;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                if (((condition_0_reg_90 = ap_const_lv1_0) or not((ap_const_lv1_0 = exitcond_i_fu_73_p2)))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;

    ap_done_assign_proc : process(condition_0_reg_90, ap_sig_cseq_ST_st9_fsm_8, exitcond_i_fu_73_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) and ((condition_0_reg_90 = ap_const_lv1_0) or not((ap_const_lv1_0 = exitcond_i_fu_73_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(condition_0_reg_90, ap_sig_cseq_ST_st9_fsm_8, exitcond_i_fu_73_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) and ((condition_0_reg_90 = ap_const_lv1_0) or not((ap_const_lv1_0 = exitcond_i_fu_73_p2))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_109_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_109 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    ap_sig_137_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_137 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    ap_sig_191_assign_proc : process(ap_sig_cseq_ST_st9_fsm_8, exitcond_i_fu_73_p2)
    begin
                ap_sig_191 <= ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) and (ap_const_lv1_0 = exitcond_i_fu_73_p2));
    end process;


    ap_sig_24_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_24 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_48_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_48 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_56_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_56 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_64_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_64 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_72_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_72 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_80_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_80 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    ap_sig_88_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_88 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    ap_sig_95_assign_proc : process(ap_start, grp_rt_feedback_read_packet_fu_65_fet_packet_spk_id_V_blk_n)
    begin
                ap_sig_95 <= ((ap_start = ap_const_logic_0) or (grp_rt_feedback_read_packet_fu_65_fet_packet_spk_id_V_blk_n = ap_const_logic_0));
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_24)
    begin
        if (ap_sig_24) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_48)
    begin
        if (ap_sig_48) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_56)
    begin
        if (ap_sig_56) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_64)
    begin
        if (ap_sig_64) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_72)
    begin
        if (ap_sig_72) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_80)
    begin
        if (ap_sig_80) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_88)
    begin
        if (ap_sig_88) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_137)
    begin
        if (ap_sig_137) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_109)
    begin
        if (ap_sig_109) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_i_fu_73_p2 <= "1" when (i_i_reg_54 = ap_const_lv15_61A8) else "0";

    fet_packet_spk_id_V_blk_n_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, grp_rt_feedback_read_packet_fu_65_fet_packet_spk_id_V_blk_n, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st7_fsm_6)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0))) or (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6))) then 
            fet_packet_spk_id_V_blk_n <= grp_rt_feedback_read_packet_fu_65_fet_packet_spk_id_V_blk_n;
        else 
            fet_packet_spk_id_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    fet_packet_spk_id_V_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st7_fsm_6, grp_rt_feedback_read_packet_fu_65_fet_packet_spk_id_V_read)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) or (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6))) then 
            fet_packet_spk_id_V_read <= grp_rt_feedback_read_packet_fu_65_fet_packet_spk_id_V_read;
        else 
            fet_packet_spk_id_V_read <= ap_const_logic_0;
        end if; 
    end process;


    grp_rt_feedback_read_packet_fu_65_ap_start_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
            grp_rt_feedback_read_packet_fu_65_ap_start <= ap_const_logic_1;
        else 
            grp_rt_feedback_read_packet_fu_65_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_79_p2 <= std_logic_vector(unsigned(i_i_reg_54) + unsigned(ap_const_lv15_1));
    stim_V <= ap_const_lv1_1;

    stim_V_ap_vld_assign_proc : process(condition_0_reg_90, ap_sig_cseq_ST_st9_fsm_8, exitcond_i_fu_73_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) and not((condition_0_reg_90 = ap_const_lv1_0)) and (ap_const_lv1_0 = exitcond_i_fu_73_p2))) then 
            stim_V_ap_vld <= ap_const_logic_1;
        else 
            stim_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
